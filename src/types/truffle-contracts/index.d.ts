/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from 'bignumber.js';

export interface ChallengeableContract extends Truffle.Contract<ChallengeableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<ChallengeableInstance>;
}

export interface ConfiguratedContract extends Truffle.Contract<ConfiguratedInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<ConfiguratedInstance>;
}

export interface CoordinatableContract extends Truffle.Contract<CoordinatableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<CoordinatableInstance>;
}

export interface DepositChallengeContract extends Truffle.Contract<DepositChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<DepositChallengeInstance>;
}

export interface DeserializationTesterContract extends Truffle.Contract<DeserializationTesterInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<DeserializationTesterInstance>;
}

export interface HeaderChallengeContract extends Truffle.Contract<HeaderChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<HeaderChallengeInstance>;
}

export interface ICoordinatableContract extends Truffle.Contract<ICoordinatableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<ICoordinatableInstance>;
}

export interface IDepositChallengeContract extends Truffle.Contract<IDepositChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IDepositChallengeInstance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface IERC721Contract extends Truffle.Contract<IERC721Instance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IERC721Instance>;
}

export interface IHeaderChallengeContract extends Truffle.Contract<IHeaderChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IHeaderChallengeInstance>;
}

export interface IMigratableContract extends Truffle.Contract<IMigratableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IMigratableInstance>;
}

export interface IMigrationChallengeContract extends Truffle.Contract<IMigrationChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IMigrationChallengeInstance>;
}

export interface IRollUpableContract extends Truffle.Contract<IRollUpableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IRollUpableInstance>;
}

export interface IRollUpChallengeContract extends Truffle.Contract<IRollUpChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IRollUpChallengeInstance>;
}

export interface ISetupWizardContract extends Truffle.Contract<ISetupWizardInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<ISetupWizardInstance>;
}

export interface ITxChallengeContract extends Truffle.Contract<ITxChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<ITxChallengeInstance>;
}

export interface IUserInteractableContract extends Truffle.Contract<IUserInteractableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<IUserInteractableInstance>;
}

export interface Layer2Contract extends Truffle.Contract<Layer2Instance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<Layer2Instance>;
}

export interface Layer2ControllerContract extends Truffle.Contract<Layer2ControllerInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<Layer2ControllerInstance>;
}

export interface MigratableContract extends Truffle.Contract<MigratableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<MigratableInstance>;
}

export interface MigrationChallengeContract extends Truffle.Contract<MigrationChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<MigrationChallengeInstance>;
}

export interface MigrationsContract extends Truffle.Contract<MigrationsInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface MiMCContract extends Truffle.Contract<MiMCInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<MiMCInstance>;
}

export interface PoseidonContract extends Truffle.Contract<PoseidonInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<PoseidonInstance>;
}

export interface RollUpableContract extends Truffle.Contract<RollUpableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<RollUpableInstance>;
}

export interface RollUpChallengeContract extends Truffle.Contract<RollUpChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<RollUpChallengeInstance>;
}

export interface SetupWizardContract extends Truffle.Contract<SetupWizardInstance> {
  'new'(_setupWizard: string | BigNumber, meta?: Truffle.TransactionDetails): Promise<SetupWizardInstance>;
}

export interface SMT256Contract extends Truffle.Contract<SMT256Instance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<SMT256Instance>;
}

export interface TestERC20Contract extends Truffle.Contract<TestERC20Instance> {
  'new'(initialSupply: number | BigNumber | string, meta?: Truffle.TransactionDetails): Promise<TestERC20Instance>;
}

export interface TxChallengeContract extends Truffle.Contract<TxChallengeInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<TxChallengeInstance>;
}

export interface UserInteractableContract extends Truffle.Contract<UserInteractableInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<UserInteractableInstance>;
}

export interface ZkOptimisticRollUpContract extends Truffle.Contract<ZkOptimisticRollUpInstance> {
  'new'(_setupWizard: string | BigNumber, meta?: Truffle.TransactionDetails): Promise<ZkOptimisticRollUpInstance>;
}

export interface MiMCContract extends Truffle.Contract<MiMCInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<MiMCInstance>;
}

export interface PoseidonContract extends Truffle.Contract<PoseidonInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<PoseidonInstance>;
}

export interface TestERC20Contract extends Truffle.Contract<TestERC20Instance> {
  'new'(initialSupply: number | BigNumber | string, meta?: Truffle.TransactionDetails): Promise<TestERC20Instance>;
}

export interface ChallengeableInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ConfiguratedInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface CoordinatableInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  register: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  deregister: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  propose: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  finalize: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawReward: {
    (amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isProposable(proposerAddr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface DepositChallengeInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  challengeMassDeposit: {
    (index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface DeserializationTesterInstance extends Truffle.ContractInstance {
  getProposer(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getParentBlock(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getUTXORollUp(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getNullifierRollUp(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<[string, string]>;

  getWithdrawalRollUp(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<[string, BigNumber, string, BigNumber]>;

  getTxRoot(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getMassDepositRoot(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getMassMigrationRoot(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getTxInflow(
    txIndex: number | BigNumber | string,
    inflowIndex: number | BigNumber | string,
    arg2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  getTxOutflow(
    txIndex: number | BigNumber | string,
    outflowIndex: number | BigNumber | string,
    arg2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string, BigNumber, string, BigNumber, BigNumber, BigNumber]>;

  getTxSwap(txIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getProof(txIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;

  getTxFee(txIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface HeaderChallengeInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  challengeDepositRoot: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengTxRoot: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeMigrationRoot: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeTotalFee: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ICoordinatableInstance extends Truffle.ContractInstance {
  register: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  deregister: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  propose: {
    (submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  finalize: {
    (submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawReward: {
    (amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isProposable(proposerAddr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface IDepositChallengeInstance extends Truffle.ContractInstance {
  challengeMassDeposit: {
    (index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface IERC20Instance extends Truffle.ContractInstance {
  transfer: {
    (recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferFrom: {
    (sender: string | BigNumber, recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721Instance extends Truffle.ContractInstance {
  transferFrom: {
    (from: string | BigNumber, to: string | BigNumber, tokenId: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(from: string | BigNumber, to: string | BigNumber, tokenId: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IHeaderChallengeInstance extends Truffle.ContractInstance {
  challengeDepositRoot: {
    (submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeTxRoot: {
    (submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeMigrationRoot: {
    (submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeTotalFee: {
    (submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface IMigratableInstance extends Truffle.ContractInstance {
  migrateTo: {
    (migrationId: number | BigNumber | string, to: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(migrationId: number | BigNumber | string, to: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(migrationId: number | BigNumber | string, to: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(migrationId: number | BigNumber | string, to: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface IMigrationChallengeInstance extends Truffle.ContractInstance {
  challengeMassMigrationToMassDeposit: {
    (destination: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(destination: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(destination: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(destination: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeERC20Migration: {
    (destination: string | BigNumber, erc20: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(destination: string | BigNumber, erc20: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(destination: string | BigNumber, erc20: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(destination: string | BigNumber, erc20: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeERC721Migration: {
    (
      destination: string | BigNumber,
      erc721: string | BigNumber,
      tokenId: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: string | BigNumber,
      erc721: string | BigNumber,
      tokenId: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string | BigNumber,
      erc721: string | BigNumber,
      tokenId: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BigNumber,
      erc721: string | BigNumber,
      tokenId: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IRollUpableInstance extends Truffle.ContractInstance {
  newProofOfUTXORollUp: {
    (
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newProofOfNullifierRollUp: {
    (prevRoot: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(prevRoot: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(prevRoot: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(prevRoot: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  newProofOfWithdrawalRollUp: {
    (startingRoot: number | BigNumber | string, startingIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(startingRoot: number | BigNumber | string, startingIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(startingRoot: number | BigNumber | string, startingIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updateProofOfUTXORollUp: {
    (id: number | BigNumber | string, leaves: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(id: number | BigNumber | string, leaves: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(id: number | BigNumber | string, leaves: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(id: number | BigNumber | string, leaves: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updateProofOfNullifierRollUp: {
    (id: number | BigNumber | string, leaves: (string | BigNumber)[], siblings: (string | BigNumber)[][], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      id: number | BigNumber | string,
      leaves: (string | BigNumber)[],
      siblings: (string | BigNumber)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      leaves: (string | BigNumber)[],
      siblings: (string | BigNumber)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      leaves: (string | BigNumber)[],
      siblings: (string | BigNumber)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateProofOfWithdrawalRollUp: {
    (
      id: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      leaves: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      leaves: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      leaves: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      leaves: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IRollUpChallengeInstance extends Truffle.ContractInstance {
  challengeUTXORollUp: {
    (
      proofId: number | BigNumber | string,
      deposits: (number | BigNumber | string)[],
      numOfUTXO: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proofId: number | BigNumber | string,
      deposits: (number | BigNumber | string)[],
      numOfUTXO: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proofId: number | BigNumber | string,
      deposits: (number | BigNumber | string)[],
      numOfUTXO: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proofId: number | BigNumber | string,
      deposits: (number | BigNumber | string)[],
      numOfUTXO: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  challengeNullifierRollUp: {
    (proofId: number | BigNumber | string, numOfNullifiers: number | BigNumber | string, submission: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      proofId: number | BigNumber | string,
      numOfNullifiers: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proofId: number | BigNumber | string,
      numOfNullifiers: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proofId: number | BigNumber | string,
      numOfNullifiers: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  challengeWithdrawalRollUp: {
    (proofId: number | BigNumber | string, numOfWithdrawals: number | BigNumber | string, submission: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      proofId: number | BigNumber | string,
      numOfWithdrawals: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proofId: number | BigNumber | string,
      numOfWithdrawals: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proofId: number | BigNumber | string,
      numOfWithdrawals: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ISetupWizardInstance extends Truffle.ContractInstance {
  registerVk: {
    (
      txType: number | BigNumber | string,
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txType: number | BigNumber | string,
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txType: number | BigNumber | string,
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txType: number | BigNumber | string,
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeUserInteractable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  makeRollUpable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  makeChallengeable: {
    (
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeMigratable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  allowMigrants: {
    (migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  completeSetup: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ITxChallengeInstance extends Truffle.ContractInstance {
  challengeInclusion: {
    (
      txType: number | BigNumber | string,
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txType: number | BigNumber | string,
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txType: number | BigNumber | string,
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txType: number | BigNumber | string,
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  challengeTransaction: {
    (txIndex: number | BigNumber | string, submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txIndex: number | BigNumber | string, submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txIndex: number | BigNumber | string, submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txIndex: number | BigNumber | string, submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeUsedNullifier: {
    (
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      sibling: (string | BigNumber)[],
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      sibling: (string | BigNumber)[],
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      sibling: (string | BigNumber)[],
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      sibling: (string | BigNumber)[],
      submission: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  challengeDuplicatedNullifier: {
    (nullifier: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(nullifier: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(nullifier: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(nullifier: string | BigNumber, submission: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isValidRef(l2BlockHash: string | BigNumber, ref: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface IUserInteractableInstance extends Truffle.ContractInstance {
  deposit: {
    (
      note: number | BigNumber | string,
      amount: number | BigNumber | string,
      fee: number | BigNumber | string,
      pubKey: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      note: number | BigNumber | string,
      amount: number | BigNumber | string,
      fee: number | BigNumber | string,
      pubKey: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      note: number | BigNumber | string,
      amount: number | BigNumber | string,
      fee: number | BigNumber | string,
      pubKey: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      note: number | BigNumber | string,
      amount: number | BigNumber | string,
      fee: number | BigNumber | string,
      pubKey: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      amount: number | BigNumber | string,
      proofHash: string | BigNumber,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      proofHash: string | BigNumber,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      proofHash: string | BigNumber,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      proofHash: string | BigNumber,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawUsingSignature: {
    (
      amount: number | BigNumber | string,
      to: string | BigNumber,
      proofHash: string | BigNumber,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      to: string | BigNumber,
      proofHash: string | BigNumber,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      to: string | BigNumber,
      proofHash: string | BigNumber,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      to: string | BigNumber,
      proofHash: string | BigNumber,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Layer2Instance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface Layer2ControllerInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  deregister: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  finalize: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isProposable(proposerAddr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  propose: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  proxied(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;

  register: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawReward: {
    (amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface MigratableInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  migrateTo: {
    (submissionId: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(submissionId: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(submissionId: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(submissionId: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  acceptMigration: {
    (submissionId: string | BigNumber, merged: string | BigNumber, fee: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(submissionId: string | BigNumber, merged: string | BigNumber, fee: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      submissionId: string | BigNumber,
      merged: string | BigNumber,
      fee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      submissionId: string | BigNumber,
      merged: string | BigNumber,
      fee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MigrationChallengeInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  challengeMassMigrationToMassDeposit: {
    (destination: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(destination: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(destination: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(destination: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeERC20Migration: {
    (destination: string | BigNumber, erc20: string | BigNumber, arg2: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(destination: string | BigNumber, erc20: string | BigNumber, arg2: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(destination: string | BigNumber, erc20: string | BigNumber, arg2: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(destination: string | BigNumber, erc20: string | BigNumber, arg2: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeERC721Migration: {
    (
      destination: string | BigNumber,
      erc721: string | BigNumber,
      tokenId: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: string | BigNumber,
      erc721: string | BigNumber,
      tokenId: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination: string | BigNumber,
      erc721: string | BigNumber,
      tokenId: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BigNumber,
      erc721: string | BigNumber,
      tokenId: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  upgrade: {
    (new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface MiMCInstance extends Truffle.ContractInstance {
  MiMCSponge(
    xL_in: number | BigNumber | string,
    xR_in: number | BigNumber | string,
    k: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;
}

export interface PoseidonInstance extends Truffle.ContractInstance {
  poseidon(input: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface RollUpableInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  newProofOfUTXORollUp: {
    (
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newProofOfNullifierRollUp: {
    (prevRoot: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(prevRoot: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(prevRoot: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(prevRoot: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  newProofOfWithdrawalRollUp: {
    (startingRoot: number | BigNumber | string, startingIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(startingRoot: number | BigNumber | string, startingIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      startingRoot: number | BigNumber | string,
      startingIndex: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(startingRoot: number | BigNumber | string, startingIndex: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updateProofOfUTXORollUp: {
    (id: number | BigNumber | string, leaves: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(id: number | BigNumber | string, leaves: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(id: number | BigNumber | string, leaves: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(id: number | BigNumber | string, leaves: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updateProofOfNullifierRollUp: {
    (id: number | BigNumber | string, leaves: (string | BigNumber)[], siblings: (string | BigNumber)[][], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      id: number | BigNumber | string,
      leaves: (string | BigNumber)[],
      siblings: (string | BigNumber)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      leaves: (string | BigNumber)[],
      siblings: (string | BigNumber)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      leaves: (string | BigNumber)[],
      siblings: (string | BigNumber)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateProofOfWithdrawalRollUp: {
    (
      id: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      leaves: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      leaves: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      leaves: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      initialSiblings: (number | BigNumber | string)[],
      leaves: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface RollUpChallengeInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  challengeUTXORollUp: {
    (
      utxoRollUpId: number | BigNumber | string,
      _deposits: (number | BigNumber | string)[],
      numOfUTXOs: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      utxoRollUpId: number | BigNumber | string,
      _deposits: (number | BigNumber | string)[],
      numOfUTXOs: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      utxoRollUpId: number | BigNumber | string,
      _deposits: (number | BigNumber | string)[],
      numOfUTXOs: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      utxoRollUpId: number | BigNumber | string,
      _deposits: (number | BigNumber | string)[],
      numOfUTXOs: number | BigNumber | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  challengeNullifierRollUp: {
    (
      nullifierRollUpId: number | BigNumber | string,
      numOfNullifiers: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      nullifierRollUpId: number | BigNumber | string,
      numOfNullifiers: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      nullifierRollUpId: number | BigNumber | string,
      numOfNullifiers: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      nullifierRollUpId: number | BigNumber | string,
      numOfNullifiers: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  challengeWithdrawalRollUp: {
    (
      withdrawalRollUpId: number | BigNumber | string,
      numOfWithdrawals: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      withdrawalRollUpId: number | BigNumber | string,
      numOfWithdrawals: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      withdrawalRollUpId: number | BigNumber | string,
      numOfWithdrawals: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      withdrawalRollUpId: number | BigNumber | string,
      numOfWithdrawals: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface SetupWizardInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  deregister: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  finalize: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isProposable(proposerAddr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  propose: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  proxied(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;

  register: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawReward: {
    (amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  registerVk: {
    (
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeUserInteractable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  makeRollUpable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  makeChallengeable: {
    (
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeMigratable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  allowMigrants: {
    (migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  completeSetup: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface SMT256Instance extends Truffle.ContractInstance {
  EXIST(txDetails?: Truffle.TransactionDetails): Promise<string>;

  NON_EXIST(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface TestERC20Instance extends Truffle.ContractInstance {
  allowance(owner: string | BigNumber, spender: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  approve: {
    (spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  balanceOf(account: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  increaseAllowance: {
    (spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferFrom: {
    (sender: string | BigNumber, recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TxChallengeInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  challengeInclusion: {
    (txIndex: number | BigNumber | string, inflowIndex: number | BigNumber | string, arg2: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txIndex: number | BigNumber | string, inflowIndex: number | BigNumber | string, arg2: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  challengeTransaction: {
    (index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeAtomicSwap: {
    (index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(index: number | BigNumber | string, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  challengeUsedNullifier: {
    (
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      sibling: (string | BigNumber)[],
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      sibling: (string | BigNumber)[],
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      sibling: (string | BigNumber)[],
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      txIndex: number | BigNumber | string,
      inflowIndex: number | BigNumber | string,
      sibling: (string | BigNumber)[],
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  challengeDuplicatedNullifier: {
    (nullifier: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(nullifier: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(nullifier: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(nullifier: string | BigNumber, arg1: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isValidRef(l2BlockHash: string | BigNumber, ref: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface UserInteractableInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  RANGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SNARK_FIELD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  deposit: {
    (
      eth: number | BigNumber | string,
      salt: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      pubKey: (number | BigNumber | string)[],
      fee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      eth: number | BigNumber | string,
      salt: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      pubKey: (number | BigNumber | string)[],
      fee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      eth: number | BigNumber | string,
      salt: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      pubKey: (number | BigNumber | string)[],
      fee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      eth: number | BigNumber | string,
      salt: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      pubKey: (number | BigNumber | string)[],
      fee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      eth: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      fee: number | BigNumber | string,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      eth: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      fee: number | BigNumber | string,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      eth: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      fee: number | BigNumber | string,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      eth: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      fee: number | BigNumber | string,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawUsingSignature: {
    (
      to: string | BigNumber,
      eth: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      fee: number | BigNumber | string,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      eth: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      fee: number | BigNumber | string,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      eth: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      fee: number | BigNumber | string,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      eth: number | BigNumber | string,
      token: string | BigNumber,
      amount: number | BigNumber | string,
      nft: number | BigNumber | string,
      fee: number | BigNumber | string,
      rootIndex: number | BigNumber | string,
      leafIndex: number | BigNumber | string,
      siblings: (number | BigNumber | string)[],
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ZkOptimisticRollUpInstance extends Truffle.ContractInstance {
  CHALLENGE_LIMIT(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  CHALLENGE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  MINIMUM_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  POOL_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  REF_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_DEPTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  SUB_TREE_SIZE(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  allowMigrants: {
    (migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(migrants: (string | BigNumber)[], txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  completeSetup: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  deregister: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  finalize: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isProposable(proposerAddr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  makeChallengeable: {
    (
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      depositChallenge: string | BigNumber,
      headerChallenge: string | BigNumber,
      migrationChallenge: string | BigNumber,
      rollUpChallenge: string | BigNumber,
      txChallenge: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeMigratable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  makeRollUpable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  makeUserInteractable: {
    (addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(addr: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  propose: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  proxied(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;

  register: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  registerVk: {
    (
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      numOfInputs: number | BigNumber | string,
      numOfOutputs: number | BigNumber | string,
      alfa1: (number | BigNumber | string)[],
      beta2: (number | BigNumber | string)[][],
      gamma2: (number | BigNumber | string)[][],
      delta2: (number | BigNumber | string)[][],
      ic: (number | BigNumber | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface MiMCInstance extends Truffle.ContractInstance {
  MiMCSponge(
    xL_in: number | BigNumber | string,
    xR_in: number | BigNumber | string,
    k: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;
}

export interface PoseidonInstance extends Truffle.ContractInstance {
  poseidon(input: (number | BigNumber | string)[], txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface TestERC20Instance extends Truffle.ContractInstance {
  allowance(owner: string | BigNumber, spender: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  approve: {
    (spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  balanceOf(account: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  increaseAllowance: {
    (spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferFrom: {
    (sender: string | BigNumber, recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}
