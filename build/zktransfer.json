{
 "mainCode": "{\n    {\n        {\n            {\n            }\n            {\n            }\n            {\n                {\n                    {\n                        {\n                        }\n                    }\n                    {\n                        {\n                        }\n                    }\n                }\n                {\n                }\n            }\n        }\n        {\n        }\n        {\n            {\n            }\n            {\n            }\n        }\n        {\n            {\n            }\n            {\n            }\n        }\n    }\n}\n",
 "signalName2Idx": {
  "one": 0,
  "main.leaves[0]": 8,
  "main.leaves[1]": 9,
  "main.inclusion_proofs[0][0]": 10,
  "main.inclusion_proofs[0][1]": 11,
  "main.inclusion_proofs[1][0]": 12,
  "main.inclusion_proofs[1][1]": 13,
  "main.inclusion_proofs[2][0]": 14,
  "main.inclusion_proofs[2][1]": 15,
  "main.inclusion_proofs[3][0]": 16,
  "main.inclusion_proofs[3][1]": 17,
  "main.inclusion_proofs[4][0]": 18,
  "main.inclusion_proofs[4][1]": 19,
  "main.inclusion_proofs[5][0]": 20,
  "main.inclusion_proofs[5][1]": 21,
  "main.inclusion_proofs[6][0]": 22,
  "main.inclusion_proofs[6][1]": 23,
  "main.inclusion_proofs[7][0]": 24,
  "main.inclusion_proofs[7][1]": 25,
  "main.inclusion_proofs[8][0]": 26,
  "main.inclusion_proofs[8][1]": 27,
  "main.inclusion_proofs[9][0]": 28,
  "main.inclusion_proofs[9][1]": 29,
  "main.inclusion_proofs[10][0]": 30,
  "main.inclusion_proofs[10][1]": 31,
  "main.inclusion_proofs[11][0]": 32,
  "main.inclusion_proofs[11][1]": 33,
  "main.inclusion_proofs[12][0]": 34,
  "main.inclusion_proofs[12][1]": 35,
  "main.inclusion_proofs[13][0]": 36,
  "main.inclusion_proofs[13][1]": 37,
  "main.inclusion_proofs[14][0]": 38,
  "main.inclusion_proofs[14][1]": 39,
  "main.inclusion_proofs[15][0]": 40,
  "main.inclusion_proofs[15][1]": 41,
  "main.inclusion_proofs[16][0]": 42,
  "main.inclusion_proofs[16][1]": 43,
  "main.inclusion_proofs[17][0]": 44,
  "main.inclusion_proofs[17][1]": 45,
  "main.inclusion_proofs[18][0]": 46,
  "main.inclusion_proofs[18][1]": 47,
  "main.inclusion_proofs[19][0]": 48,
  "main.inclusion_proofs[19][1]": 49,
  "main.inclusion_proofs[20][0]": 50,
  "main.inclusion_proofs[20][1]": 51,
  "main.inclusion_proofs[21][0]": 52,
  "main.inclusion_proofs[21][1]": 53,
  "main.inclusion_proofs[22][0]": 54,
  "main.inclusion_proofs[22][1]": 55,
  "main.inclusion_proofs[23][0]": 56,
  "main.inclusion_proofs[23][1]": 57,
  "main.inclusion_proofs[24][0]": 58,
  "main.inclusion_proofs[24][1]": 59,
  "main.inclusion_proofs[25][0]": 60,
  "main.inclusion_proofs[25][1]": 61,
  "main.inclusion_proofs[26][0]": 62,
  "main.inclusion_proofs[26][1]": 63,
  "main.inclusion_proofs[27][0]": 64,
  "main.inclusion_proofs[27][1]": 65,
  "main.inclusion_proofs[28][0]": 66,
  "main.inclusion_proofs[28][1]": 67,
  "main.inclusion_proofs[29][0]": 68,
  "main.inclusion_proofs[29][1]": 69,
  "main.inclusion_proofs[30][0]": 70,
  "main.inclusion_proofs[30][1]": 71,
  "main.inclusion_proofs[31][0]": 72,
  "main.inclusion_proofs[31][1]": 73,
  "main.inclusion_proofs[32][0]": 74,
  "main.inclusion_proofs[32][1]": 75,
  "main.inclusion_proofs[33][0]": 76,
  "main.inclusion_proofs[33][1]": 77,
  "main.inclusion_proofs[34][0]": 78,
  "main.inclusion_proofs[34][1]": 79,
  "main.inclusion_proofs[35][0]": 80,
  "main.inclusion_proofs[35][1]": 81,
  "main.inclusion_proofs[36][0]": 82,
  "main.inclusion_proofs[36][1]": 83,
  "main.inclusion_proofs[37][0]": 84,
  "main.inclusion_proofs[37][1]": 85,
  "main.inclusion_proofs[38][0]": 86,
  "main.inclusion_proofs[38][1]": 87,
  "main.inclusion_proofs[39][0]": 88,
  "main.inclusion_proofs[39][1]": 89,
  "main.inclusion_proofs[40][0]": 90,
  "main.inclusion_proofs[40][1]": 91,
  "main.inclusion_proofs[41][0]": 92,
  "main.inclusion_proofs[41][1]": 93,
  "main.inclusion_proofs[42][0]": 94,
  "main.inclusion_proofs[42][1]": 95,
  "main.inclusion_proofs[43][0]": 96,
  "main.inclusion_proofs[43][1]": 97,
  "main.inclusion_proofs[44][0]": 98,
  "main.inclusion_proofs[44][1]": 99,
  "main.inclusion_proofs[45][0]": 100,
  "main.inclusion_proofs[45][1]": 101,
  "main.inclusion_proofs[46][0]": 102,
  "main.inclusion_proofs[46][1]": 103,
  "main.inclusion_proofs[47][0]": 104,
  "main.inclusion_proofs[47][1]": 105,
  "main.inclusion_proofs[48][0]": 106,
  "main.inclusion_proofs[48][1]": 107,
  "main.inclusion_proofs[49][0]": 108,
  "main.inclusion_proofs[49][1]": 109,
  "main.inclusion_proofs[50][0]": 110,
  "main.inclusion_proofs[50][1]": 111,
  "main.inclusion_proofs[51][0]": 112,
  "main.inclusion_proofs[51][1]": 113,
  "main.inclusion_proofs[52][0]": 114,
  "main.inclusion_proofs[52][1]": 115,
  "main.inclusion_proofs[53][0]": 116,
  "main.inclusion_proofs[53][1]": 117,
  "main.inclusion_proofs[54][0]": 118,
  "main.inclusion_proofs[54][1]": 119,
  "main.inclusion_proofs[55][0]": 120,
  "main.inclusion_proofs[55][1]": 121,
  "main.inclusion_proofs[56][0]": 122,
  "main.inclusion_proofs[56][1]": 123,
  "main.inclusion_proofs[57][0]": 124,
  "main.inclusion_proofs[57][1]": 125,
  "main.inclusion_proofs[58][0]": 126,
  "main.inclusion_proofs[58][1]": 127,
  "main.inclusion_proofs[59][0]": 128,
  "main.inclusion_proofs[59][1]": 129,
  "main.inclusion_proofs[60][0]": 130,
  "main.inclusion_proofs[60][1]": 131,
  "main.inclusion_proofs[61][0]": 132,
  "main.inclusion_proofs[61][1]": 133,
  "main.inclusion_proofs[62][0]": 134,
  "main.inclusion_proofs[62][1]": 135,
  "main.inclusion_proofs[63][0]": 136,
  "main.inclusion_proofs[63][1]": 137,
  "main.inclusion_proofs[64][0]": 138,
  "main.inclusion_proofs[64][1]": 139,
  "main.inclusion_proofs[65][0]": 140,
  "main.inclusion_proofs[65][1]": 141,
  "main.inclusion_proofs[66][0]": 142,
  "main.inclusion_proofs[66][1]": 143,
  "main.inclusion_proofs[67][0]": 144,
  "main.inclusion_proofs[67][1]": 145,
  "main.inclusion_proofs[68][0]": 146,
  "main.inclusion_proofs[68][1]": 147,
  "main.inclusion_proofs[69][0]": 148,
  "main.inclusion_proofs[69][1]": 149,
  "main.inclusion_proofs[70][0]": 150,
  "main.inclusion_proofs[70][1]": 151,
  "main.inclusion_proofs[71][0]": 152,
  "main.inclusion_proofs[71][1]": 153,
  "main.inclusion_proofs[72][0]": 154,
  "main.inclusion_proofs[72][1]": 155,
  "main.inclusion_proofs[73][0]": 156,
  "main.inclusion_proofs[73][1]": 157,
  "main.inclusion_proofs[74][0]": 158,
  "main.inclusion_proofs[74][1]": 159,
  "main.inclusion_proofs[75][0]": 160,
  "main.inclusion_proofs[75][1]": 161,
  "main.inclusion_proofs[76][0]": 162,
  "main.inclusion_proofs[76][1]": 163,
  "main.inclusion_proofs[77][0]": 164,
  "main.inclusion_proofs[77][1]": 165,
  "main.inclusion_proofs[78][0]": 166,
  "main.inclusion_proofs[78][1]": 167,
  "main.inclusion_proofs[79][0]": 168,
  "main.inclusion_proofs[79][1]": 169,
  "main.inclusion_proofs[80][0]": 170,
  "main.inclusion_proofs[80][1]": 171,
  "main.inclusion_proofs[81][0]": 172,
  "main.inclusion_proofs[81][1]": 173,
  "main.inclusion_proofs[82][0]": 174,
  "main.inclusion_proofs[82][1]": 175,
  "main.inclusion_proofs[83][0]": 176,
  "main.inclusion_proofs[83][1]": 177,
  "main.inclusion_proofs[84][0]": 178,
  "main.inclusion_proofs[84][1]": 179,
  "main.inclusion_proofs[85][0]": 180,
  "main.inclusion_proofs[85][1]": 181,
  "main.inclusion_proofs[86][0]": 182,
  "main.inclusion_proofs[86][1]": 183,
  "main.inclusion_proofs[87][0]": 184,
  "main.inclusion_proofs[87][1]": 185,
  "main.inclusion_proofs[88][0]": 186,
  "main.inclusion_proofs[88][1]": 187,
  "main.inclusion_proofs[89][0]": 188,
  "main.inclusion_proofs[89][1]": 189,
  "main.inclusion_proofs[90][0]": 190,
  "main.inclusion_proofs[90][1]": 191,
  "main.inclusion_proofs[91][0]": 192,
  "main.inclusion_proofs[91][1]": 193,
  "main.inclusion_proofs[92][0]": 194,
  "main.inclusion_proofs[92][1]": 195,
  "main.inclusion_proofs[93][0]": 196,
  "main.inclusion_proofs[93][1]": 197,
  "main.inclusion_proofs[94][0]": 198,
  "main.inclusion_proofs[94][1]": 199,
  "main.inclusion_proofs[95][0]": 200,
  "main.inclusion_proofs[95][1]": 201,
  "main.inclusion_proofs[96][0]": 202,
  "main.inclusion_proofs[96][1]": 203,
  "main.inclusion_proofs[97][0]": 204,
  "main.inclusion_proofs[97][1]": 205,
  "main.inclusion_proofs[98][0]": 206,
  "main.inclusion_proofs[98][1]": 207,
  "main.inclusion_proofs[99][0]": 208,
  "main.inclusion_proofs[99][1]": 209,
  "main.inclusion_proofs[100][0]": 210,
  "main.inclusion_proofs[100][1]": 211,
  "main.inclusion_proofs[101][0]": 212,
  "main.inclusion_proofs[101][1]": 213,
  "main.inclusion_proofs[102][0]": 214,
  "main.inclusion_proofs[102][1]": 215,
  "main.inclusion_proofs[103][0]": 216,
  "main.inclusion_proofs[103][1]": 217,
  "main.inclusion_proofs[104][0]": 218,
  "main.inclusion_proofs[104][1]": 219,
  "main.inclusion_proofs[105][0]": 220,
  "main.inclusion_proofs[105][1]": 221,
  "main.inclusion_proofs[106][0]": 222,
  "main.inclusion_proofs[106][1]": 223,
  "main.inclusion_proofs[107][0]": 224,
  "main.inclusion_proofs[107][1]": 225,
  "main.inclusion_proofs[108][0]": 226,
  "main.inclusion_proofs[108][1]": 227,
  "main.inclusion_proofs[109][0]": 228,
  "main.inclusion_proofs[109][1]": 229,
  "main.inclusion_proofs[110][0]": 230,
  "main.inclusion_proofs[110][1]": 231,
  "main.inclusion_proofs[111][0]": 232,
  "main.inclusion_proofs[111][1]": 233,
  "main.inclusion_proofs[112][0]": 234,
  "main.inclusion_proofs[112][1]": 235,
  "main.inclusion_proofs[113][0]": 236,
  "main.inclusion_proofs[113][1]": 237,
  "main.inclusion_proofs[114][0]": 238,
  "main.inclusion_proofs[114][1]": 239,
  "main.inclusion_proofs[115][0]": 240,
  "main.inclusion_proofs[115][1]": 241,
  "main.inclusion_proofs[116][0]": 242,
  "main.inclusion_proofs[116][1]": 243,
  "main.inclusion_proofs[117][0]": 244,
  "main.inclusion_proofs[117][1]": 245,
  "main.inclusion_proofs[118][0]": 246,
  "main.inclusion_proofs[118][1]": 247,
  "main.inclusion_proofs[119][0]": 248,
  "main.inclusion_proofs[119][1]": 249,
  "main.inclusion_proofs[120][0]": 250,
  "main.inclusion_proofs[120][1]": 251,
  "main.inclusion_proofs[121][0]": 252,
  "main.inclusion_proofs[121][1]": 253,
  "main.inclusion_proofs[122][0]": 254,
  "main.inclusion_proofs[122][1]": 255,
  "main.inclusion_proofs[123][0]": 256,
  "main.inclusion_proofs[123][1]": 257,
  "main.inclusion_proofs[124][0]": 258,
  "main.inclusion_proofs[124][1]": 259,
  "main.inclusion_proofs[125][0]": 260,
  "main.inclusion_proofs[125][1]": 261,
  "main.inclusion_proofs[126][0]": 262,
  "main.inclusion_proofs[126][1]": 263,
  "main.inclusion_proofs[127][0]": 264,
  "main.inclusion_proofs[127][1]": 265,
  "main.inclusion_proofs[128][0]": 266,
  "main.inclusion_proofs[128][1]": 267,
  "main.inclusion_proofs[129][0]": 268,
  "main.inclusion_proofs[129][1]": 269,
  "main.inclusion_proofs[130][0]": 270,
  "main.inclusion_proofs[130][1]": 271,
  "main.inclusion_proofs[131][0]": 272,
  "main.inclusion_proofs[131][1]": 273,
  "main.inclusion_proofs[132][0]": 274,
  "main.inclusion_proofs[132][1]": 275,
  "main.inclusion_proofs[133][0]": 276,
  "main.inclusion_proofs[133][1]": 277,
  "main.inclusion_proofs[134][0]": 278,
  "main.inclusion_proofs[134][1]": 279,
  "main.inclusion_proofs[135][0]": 280,
  "main.inclusion_proofs[135][1]": 281,
  "main.inclusion_proofs[136][0]": 282,
  "main.inclusion_proofs[136][1]": 283,
  "main.inclusion_proofs[137][0]": 284,
  "main.inclusion_proofs[137][1]": 285,
  "main.inclusion_proofs[138][0]": 286,
  "main.inclusion_proofs[138][1]": 287,
  "main.inclusion_proofs[139][0]": 288,
  "main.inclusion_proofs[139][1]": 289,
  "main.inclusion_proofs[140][0]": 290,
  "main.inclusion_proofs[140][1]": 291,
  "main.inclusion_proofs[141][0]": 292,
  "main.inclusion_proofs[141][1]": 293,
  "main.inclusion_proofs[142][0]": 294,
  "main.inclusion_proofs[142][1]": 295,
  "main.inclusion_proofs[143][0]": 296,
  "main.inclusion_proofs[143][1]": 297,
  "main.inclusion_proofs[144][0]": 298,
  "main.inclusion_proofs[144][1]": 299,
  "main.inclusion_proofs[145][0]": 300,
  "main.inclusion_proofs[145][1]": 301,
  "main.inclusion_proofs[146][0]": 302,
  "main.inclusion_proofs[146][1]": 303,
  "main.inclusion_proofs[147][0]": 304,
  "main.inclusion_proofs[147][1]": 305,
  "main.inclusion_proofs[148][0]": 306,
  "main.inclusion_proofs[148][1]": 307,
  "main.inclusion_proofs[149][0]": 308,
  "main.inclusion_proofs[149][1]": 309,
  "main.inclusion_proofs[150][0]": 310,
  "main.inclusion_proofs[150][1]": 311,
  "main.inclusion_proofs[151][0]": 312,
  "main.inclusion_proofs[151][1]": 313,
  "main.inclusion_proofs[152][0]": 314,
  "main.inclusion_proofs[152][1]": 315,
  "main.inclusion_proofs[153][0]": 316,
  "main.inclusion_proofs[153][1]": 317,
  "main.inclusion_proofs[154][0]": 318,
  "main.inclusion_proofs[154][1]": 319,
  "main.inclusion_proofs[155][0]": 320,
  "main.inclusion_proofs[155][1]": 321,
  "main.inclusion_proofs[156][0]": 322,
  "main.inclusion_proofs[156][1]": 323,
  "main.inclusion_proofs[157][0]": 324,
  "main.inclusion_proofs[157][1]": 325,
  "main.inclusion_proofs[158][0]": 326,
  "main.inclusion_proofs[158][1]": 327,
  "main.inclusion_proofs[159][0]": 328,
  "main.inclusion_proofs[159][1]": 329,
  "main.inclusion_proofs[160][0]": 330,
  "main.inclusion_proofs[160][1]": 331,
  "main.inclusion_proofs[161][0]": 332,
  "main.inclusion_proofs[161][1]": 333,
  "main.inclusion_proofs[162][0]": 334,
  "main.inclusion_proofs[162][1]": 335,
  "main.inclusion_proofs[163][0]": 336,
  "main.inclusion_proofs[163][1]": 337,
  "main.inclusion_proofs[164][0]": 338,
  "main.inclusion_proofs[164][1]": 339,
  "main.inclusion_proofs[165][0]": 340,
  "main.inclusion_proofs[165][1]": 341,
  "main.inclusion_proofs[166][0]": 342,
  "main.inclusion_proofs[166][1]": 343,
  "main.inclusion_proofs[167][0]": 344,
  "main.inclusion_proofs[167][1]": 345,
  "main.inclusion_proofs[168][0]": 346,
  "main.inclusion_proofs[168][1]": 347,
  "main.inclusion_proofs[169][0]": 348,
  "main.inclusion_proofs[169][1]": 349,
  "main.inclusion_proofs[170][0]": 350,
  "main.inclusion_proofs[170][1]": 351,
  "main.inclusion_proofs[171][0]": 352,
  "main.inclusion_proofs[171][1]": 353,
  "main.inclusion_proofs[172][0]": 354,
  "main.inclusion_proofs[172][1]": 355,
  "main.inclusion_proofs[173][0]": 356,
  "main.inclusion_proofs[173][1]": 357,
  "main.inclusion_proofs[174][0]": 358,
  "main.inclusion_proofs[174][1]": 359,
  "main.inclusion_proofs[175][0]": 360,
  "main.inclusion_proofs[175][1]": 361,
  "main.inclusion_proofs[176][0]": 362,
  "main.inclusion_proofs[176][1]": 363,
  "main.inclusion_proofs[177][0]": 364,
  "main.inclusion_proofs[177][1]": 365,
  "main.inclusion_proofs[178][0]": 366,
  "main.inclusion_proofs[178][1]": 367,
  "main.inclusion_proofs[179][0]": 368,
  "main.inclusion_proofs[179][1]": 369,
  "main.inclusion_proofs[180][0]": 370,
  "main.inclusion_proofs[180][1]": 371,
  "main.inclusion_proofs[181][0]": 372,
  "main.inclusion_proofs[181][1]": 373,
  "main.inclusion_proofs[182][0]": 374,
  "main.inclusion_proofs[182][1]": 375,
  "main.inclusion_proofs[183][0]": 376,
  "main.inclusion_proofs[183][1]": 377,
  "main.inclusion_proofs[184][0]": 378,
  "main.inclusion_proofs[184][1]": 379,
  "main.inclusion_proofs[185][0]": 380,
  "main.inclusion_proofs[185][1]": 381,
  "main.inclusion_proofs[186][0]": 382,
  "main.inclusion_proofs[186][1]": 383,
  "main.inclusion_proofs[187][0]": 384,
  "main.inclusion_proofs[187][1]": 385,
  "main.inclusion_proofs[188][0]": 386,
  "main.inclusion_proofs[188][1]": 387,
  "main.inclusion_proofs[189][0]": 388,
  "main.inclusion_proofs[189][1]": 389,
  "main.inclusion_proofs[190][0]": 390,
  "main.inclusion_proofs[190][1]": 391,
  "main.inclusion_proofs[191][0]": 392,
  "main.inclusion_proofs[191][1]": 393,
  "main.inclusion_proofs[192][0]": 394,
  "main.inclusion_proofs[192][1]": 395,
  "main.inclusion_proofs[193][0]": 396,
  "main.inclusion_proofs[193][1]": 397,
  "main.inclusion_proofs[194][0]": 398,
  "main.inclusion_proofs[194][1]": 399,
  "main.inclusion_proofs[195][0]": 400,
  "main.inclusion_proofs[195][1]": 401,
  "main.inclusion_proofs[196][0]": 402,
  "main.inclusion_proofs[196][1]": 403,
  "main.inclusion_proofs[197][0]": 404,
  "main.inclusion_proofs[197][1]": 405,
  "main.inclusion_proofs[198][0]": 406,
  "main.inclusion_proofs[198][1]": 407,
  "main.inclusion_proofs[199][0]": 408,
  "main.inclusion_proofs[199][1]": 409,
  "main.inclusion_proofs[200][0]": 410,
  "main.inclusion_proofs[200][1]": 411,
  "main.inclusion_proofs[201][0]": 412,
  "main.inclusion_proofs[201][1]": 413,
  "main.inclusion_proofs[202][0]": 414,
  "main.inclusion_proofs[202][1]": 415,
  "main.inclusion_proofs[203][0]": 416,
  "main.inclusion_proofs[203][1]": 417,
  "main.inclusion_proofs[204][0]": 418,
  "main.inclusion_proofs[204][1]": 419,
  "main.inclusion_proofs[205][0]": 420,
  "main.inclusion_proofs[205][1]": 421,
  "main.inclusion_proofs[206][0]": 422,
  "main.inclusion_proofs[206][1]": 423,
  "main.inclusion_proofs[207][0]": 424,
  "main.inclusion_proofs[207][1]": 425,
  "main.inclusion_proofs[208][0]": 426,
  "main.inclusion_proofs[208][1]": 427,
  "main.inclusion_proofs[209][0]": 428,
  "main.inclusion_proofs[209][1]": 429,
  "main.inclusion_proofs[210][0]": 430,
  "main.inclusion_proofs[210][1]": 431,
  "main.inclusion_proofs[211][0]": 432,
  "main.inclusion_proofs[211][1]": 433,
  "main.inclusion_proofs[212][0]": 434,
  "main.inclusion_proofs[212][1]": 435,
  "main.inclusion_proofs[213][0]": 436,
  "main.inclusion_proofs[213][1]": 437,
  "main.inclusion_proofs[214][0]": 438,
  "main.inclusion_proofs[214][1]": 439,
  "main.inclusion_proofs[215][0]": 440,
  "main.inclusion_proofs[215][1]": 441,
  "main.inclusion_proofs[216][0]": 442,
  "main.inclusion_proofs[216][1]": 443,
  "main.inclusion_proofs[217][0]": 444,
  "main.inclusion_proofs[217][1]": 445,
  "main.inclusion_proofs[218][0]": 446,
  "main.inclusion_proofs[218][1]": 447,
  "main.inclusion_proofs[219][0]": 448,
  "main.inclusion_proofs[219][1]": 449,
  "main.inclusion_proofs[220][0]": 450,
  "main.inclusion_proofs[220][1]": 451,
  "main.inclusion_proofs[221][0]": 452,
  "main.inclusion_proofs[221][1]": 453,
  "main.inclusion_proofs[222][0]": 454,
  "main.inclusion_proofs[222][1]": 455,
  "main.inclusion_proofs[223][0]": 456,
  "main.inclusion_proofs[223][1]": 457,
  "main.inclusion_proofs[224][0]": 458,
  "main.inclusion_proofs[224][1]": 459,
  "main.inclusion_proofs[225][0]": 460,
  "main.inclusion_proofs[225][1]": 461,
  "main.inclusion_proofs[226][0]": 462,
  "main.inclusion_proofs[226][1]": 463,
  "main.inclusion_proofs[227][0]": 464,
  "main.inclusion_proofs[227][1]": 465,
  "main.inclusion_proofs[228][0]": 466,
  "main.inclusion_proofs[228][1]": 467,
  "main.inclusion_proofs[229][0]": 468,
  "main.inclusion_proofs[229][1]": 469,
  "main.inclusion_proofs[230][0]": 470,
  "main.inclusion_proofs[230][1]": 471,
  "main.inclusion_proofs[231][0]": 472,
  "main.inclusion_proofs[231][1]": 473,
  "main.inclusion_proofs[232][0]": 474,
  "main.inclusion_proofs[232][1]": 475,
  "main.inclusion_proofs[233][0]": 476,
  "main.inclusion_proofs[233][1]": 477,
  "main.inclusion_proofs[234][0]": 478,
  "main.inclusion_proofs[234][1]": 479,
  "main.inclusion_proofs[235][0]": 480,
  "main.inclusion_proofs[235][1]": 481,
  "main.inclusion_proofs[236][0]": 482,
  "main.inclusion_proofs[236][1]": 483,
  "main.inclusion_proofs[237][0]": 484,
  "main.inclusion_proofs[237][1]": 485,
  "main.inclusion_proofs[238][0]": 486,
  "main.inclusion_proofs[238][1]": 487,
  "main.inclusion_proofs[239][0]": 488,
  "main.inclusion_proofs[239][1]": 489,
  "main.inclusion_proofs[240][0]": 490,
  "main.inclusion_proofs[240][1]": 491,
  "main.inclusion_proofs[241][0]": 492,
  "main.inclusion_proofs[241][1]": 493,
  "main.inclusion_proofs[242][0]": 494,
  "main.inclusion_proofs[242][1]": 495,
  "main.inclusion_proofs[243][0]": 496,
  "main.inclusion_proofs[243][1]": 497,
  "main.inclusion_proofs[244][0]": 498,
  "main.inclusion_proofs[244][1]": 499,
  "main.inclusion_proofs[245][0]": 500,
  "main.inclusion_proofs[245][1]": 501,
  "main.inclusion_proofs[246][0]": 502,
  "main.inclusion_proofs[246][1]": 503,
  "main.inclusion_proofs[247][0]": 504,
  "main.inclusion_proofs[247][1]": 505,
  "main.inclusion_proofs[248][0]": 506,
  "main.inclusion_proofs[248][1]": 507,
  "main.inclusion_proofs[249][0]": 508,
  "main.inclusion_proofs[249][1]": 509,
  "main.inclusion_proofs[250][0]": 510,
  "main.inclusion_proofs[250][1]": 511,
  "main.inclusion_proofs[251][0]": 512,
  "main.inclusion_proofs[251][1]": 513,
  "main.inclusion_proofs[252][0]": 514,
  "main.inclusion_proofs[252][1]": 515,
  "main.inclusion_proofs[253][0]": 516,
  "main.inclusion_proofs[253][1]": 517,
  "main.inclusion_proofs[254][0]": 518,
  "main.inclusion_proofs[254][1]": 519,
  "main.inclusion_proofs[255][0]": 520,
  "main.inclusion_proofs[255][1]": 521,
  "main.nullifying_proofs[0][0]": 522,
  "main.nullifying_proofs[0][1]": 523,
  "main.nullifying_proofs[1][0]": 524,
  "main.nullifying_proofs[1][1]": 525,
  "main.nullifying_proofs[2][0]": 526,
  "main.nullifying_proofs[2][1]": 527,
  "main.nullifying_proofs[3][0]": 528,
  "main.nullifying_proofs[3][1]": 529,
  "main.nullifying_proofs[4][0]": 530,
  "main.nullifying_proofs[4][1]": 531,
  "main.nullifying_proofs[5][0]": 532,
  "main.nullifying_proofs[5][1]": 533,
  "main.nullifying_proofs[6][0]": 534,
  "main.nullifying_proofs[6][1]": 535,
  "main.nullifying_proofs[7][0]": 536,
  "main.nullifying_proofs[7][1]": 537,
  "main.nullifying_proofs[8][0]": 538,
  "main.nullifying_proofs[8][1]": 539,
  "main.nullifying_proofs[9][0]": 540,
  "main.nullifying_proofs[9][1]": 541,
  "main.utxo_details[0][0]": 542,
  "main.utxo_details[0][1]": 543,
  "main.utxo_details[1][0]": 544,
  "main.utxo_details[1][1]": 545,
  "main.utxo_details[2][0]": 546,
  "main.utxo_details[2][1]": 547,
  "main.utxo_details[3][0]": 548,
  "main.utxo_details[3][1]": 549,
  "main.fee": 3,
  "main.roots[0]": 4,
  "main.roots[1]": 5,
  "main.nullifiers[0]": 6,
  "main.nullifiers[1]": 7,
  "main.utxos[0]": 1,
  "main.utxos[1]": 2
 },
 "components": [
  {
   "name": "main",
   "params": {
    "tree_depth": "256",
    "in": "2",
    "out": "2"
   },
   "template": "ZkTransfer",
   "inputSignals": 547
  }
 ],
 "componentName2Idx": {
  "main": 0
 },
 "signals": [
  {
   "names": [
    "one"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.utxos[0]"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.utxos[1]"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.fee"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.roots[0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.roots[1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifiers[0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifiers[1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.leaves[0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.leaves[1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[0][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[0][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[1][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[1][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[2][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[2][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[3][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[3][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[4][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[4][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[5][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[5][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[6][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[6][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[7][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[7][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[8][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[8][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[9][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[9][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[10][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[10][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[11][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[11][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[12][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[12][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[13][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[13][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[14][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[14][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[15][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[15][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[16][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[16][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[17][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[17][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[18][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[18][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[19][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[19][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[20][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[20][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[21][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[21][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[22][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[22][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[23][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[23][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[24][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[24][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[25][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[25][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[26][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[26][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[27][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[27][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[28][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[28][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[29][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[29][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[30][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[30][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[31][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[31][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[32][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[32][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[33][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[33][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[34][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[34][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[35][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[35][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[36][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[36][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[37][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[37][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[38][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[38][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[39][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[39][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[40][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[40][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[41][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[41][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[42][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[42][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[43][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[43][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[44][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[44][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[45][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[45][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[46][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[46][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[47][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[47][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[48][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[48][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[49][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[49][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[50][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[50][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[51][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[51][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[52][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[52][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[53][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[53][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[54][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[54][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[55][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[55][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[56][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[56][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[57][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[57][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[58][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[58][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[59][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[59][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[60][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[60][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[61][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[61][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[62][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[62][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[63][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[63][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[64][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[64][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[65][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[65][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[66][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[66][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[67][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[67][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[68][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[68][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[69][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[69][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[70][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[70][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[71][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[71][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[72][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[72][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[73][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[73][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[74][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[74][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[75][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[75][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[76][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[76][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[77][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[77][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[78][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[78][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[79][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[79][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[80][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[80][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[81][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[81][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[82][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[82][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[83][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[83][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[84][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[84][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[85][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[85][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[86][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[86][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[87][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[87][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[88][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[88][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[89][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[89][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[90][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[90][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[91][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[91][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[92][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[92][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[93][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[93][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[94][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[94][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[95][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[95][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[96][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[96][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[97][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[97][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[98][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[98][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[99][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[99][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[100][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[100][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[101][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[101][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[102][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[102][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[103][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[103][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[104][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[104][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[105][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[105][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[106][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[106][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[107][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[107][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[108][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[108][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[109][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[109][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[110][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[110][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[111][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[111][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[112][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[112][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[113][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[113][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[114][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[114][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[115][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[115][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[116][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[116][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[117][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[117][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[118][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[118][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[119][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[119][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[120][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[120][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[121][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[121][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[122][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[122][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[123][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[123][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[124][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[124][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[125][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[125][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[126][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[126][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[127][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[127][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[128][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[128][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[129][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[129][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[130][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[130][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[131][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[131][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[132][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[132][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[133][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[133][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[134][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[134][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[135][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[135][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[136][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[136][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[137][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[137][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[138][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[138][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[139][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[139][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[140][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[140][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[141][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[141][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[142][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[142][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[143][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[143][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[144][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[144][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[145][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[145][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[146][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[146][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[147][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[147][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[148][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[148][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[149][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[149][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[150][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[150][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[151][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[151][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[152][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[152][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[153][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[153][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[154][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[154][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[155][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[155][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[156][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[156][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[157][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[157][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[158][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[158][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[159][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[159][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[160][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[160][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[161][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[161][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[162][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[162][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[163][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[163][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[164][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[164][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[165][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[165][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[166][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[166][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[167][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[167][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[168][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[168][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[169][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[169][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[170][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[170][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[171][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[171][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[172][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[172][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[173][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[173][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[174][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[174][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[175][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[175][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[176][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[176][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[177][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[177][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[178][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[178][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[179][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[179][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[180][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[180][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[181][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[181][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[182][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[182][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[183][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[183][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[184][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[184][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[185][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[185][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[186][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[186][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[187][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[187][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[188][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[188][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[189][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[189][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[190][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[190][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[191][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[191][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[192][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[192][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[193][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[193][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[194][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[194][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[195][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[195][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[196][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[196][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[197][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[197][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[198][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[198][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[199][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[199][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[200][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[200][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[201][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[201][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[202][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[202][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[203][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[203][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[204][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[204][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[205][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[205][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[206][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[206][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[207][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[207][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[208][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[208][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[209][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[209][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[210][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[210][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[211][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[211][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[212][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[212][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[213][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[213][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[214][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[214][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[215][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[215][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[216][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[216][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[217][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[217][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[218][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[218][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[219][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[219][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[220][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[220][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[221][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[221][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[222][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[222][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[223][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[223][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[224][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[224][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[225][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[225][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[226][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[226][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[227][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[227][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[228][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[228][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[229][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[229][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[230][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[230][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[231][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[231][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[232][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[232][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[233][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[233][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[234][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[234][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[235][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[235][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[236][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[236][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[237][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[237][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[238][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[238][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[239][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[239][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[240][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[240][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[241][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[241][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[242][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[242][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[243][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[243][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[244][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[244][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[245][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[245][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[246][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[246][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[247][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[247][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[248][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[248][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[249][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[249][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[250][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[250][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[251][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[251][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[252][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[252][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[253][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[253][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[254][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[254][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[255][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.inclusion_proofs[255][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[0][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[0][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[1][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[1][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[2][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[2][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[3][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[3][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[4][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[4][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[5][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[5][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[6][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[6][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[7][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[7][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[8][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[8][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[9][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.nullifying_proofs[9][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.utxo_details[0][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.utxo_details[0][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.utxo_details[1][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.utxo_details[1][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.utxo_details[2][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.utxo_details[2][1]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.utxo_details[3][0]"
   ],
   "triggerComponents": [
    0
   ]
  },
  {
   "names": [
    "main.utxo_details[3][1]"
   ],
   "triggerComponents": [
    0
   ]
  }
 ],
 "constraints": [],
 "templates": {
  "Edwards2Montgomery": "function(ctx) {\n    ctx.setSignal(\"out\", [\"0\"], bigInt(bigInt(\"1\").add(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__)).mul( bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(ctx.getSignal(\"out\", [\"0\"])).mul( bigInt(ctx.getSignal(\"in\", [\"0\"])).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"out\", [\"0\"])).mul(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__))).mod(__P__), bigInt(\"1\").add(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__), \"undefined:37:4\");\n    ctx.assert(bigInt(ctx.getSignal(\"out\", [\"1\"])).mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__), ctx.getSignal(\"out\", [\"0\"]), \"undefined:38:4\");\n}\n",
  "Montgomery2Edwards": "function(ctx) {\n    ctx.setSignal(\"out\", [\"0\"], bigInt(ctx.getSignal(\"in\", [\"0\"])).mul( bigInt(ctx.getSignal(\"in\", [\"1\"])).inverse(__P__) ).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).mul( bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(\"1\")).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"out\", [\"0\"])).mul(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__), ctx.getSignal(\"in\", [\"0\"]), \"undefined:55:4\");\n    ctx.assert(bigInt(ctx.getSignal(\"out\", [\"1\"])).mul(bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(\"1\")).mod(__P__))).mod(__P__), bigInt(ctx.getSignal(\"in\", [\"0\"])).add(__P__).sub(bigInt(\"1\")).mod(__P__), \"undefined:56:4\");\n}\n",
  "MontgomeryAdd": "function(ctx) {\n    ctx.setVar(\"a\", [], \"168700\");\n    ctx.setVar(\"d\", [], \"168696\");\n    ctx.setVar(\"A\", [], bigInt(bigInt(\"2\").mul(bigInt(bigInt(ctx.getVar(\"a\",[])).add(bigInt(ctx.getVar(\"d\",[]))).mod(__P__))).mod(__P__)).mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(ctx.getVar(\"d\",[]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setVar(\"B\", [], bigInt(\"4\").mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(ctx.getVar(\"d\",[]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setSignal(\"lamda\", [], bigInt(bigInt(ctx.getSignal(\"in2\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"1\"]))).mod(__P__)).mul( bigInt(bigInt(ctx.getSignal(\"in2\", [\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"0\"]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"lamda\", [])).mul(bigInt(bigInt(ctx.getSignal(\"in2\", [\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"0\"]))).mod(__P__))).mod(__P__), bigInt(ctx.getSignal(\"in2\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"1\"]))).mod(__P__), \"undefined:102:4\");\n    ctx.setSignal(\"out\", [\"0\"], bigInt(bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"B\",[])).mul(bigInt(ctx.getSignal(\"lamda\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"lamda\", []))).mod(__P__)).add(__P__).sub(bigInt(ctx.getVar(\"A\",[]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"0\"]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in2\", [\"0\"]))).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(bigInt(ctx.getSignal(\"lamda\", [])).mul(bigInt(bigInt(ctx.getSignal(\"in1\", [\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"out\", [\"0\"]))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in1\", [\"1\"]))).mod(__P__));\n}\n",
  "MontgomeryDouble": "function(ctx) {\n    ctx.setVar(\"a\", [], \"168700\");\n    ctx.setVar(\"d\", [], \"168696\");\n    ctx.setVar(\"A\", [], bigInt(bigInt(\"2\").mul(bigInt(bigInt(ctx.getVar(\"a\",[])).add(bigInt(ctx.getVar(\"d\",[]))).mod(__P__))).mod(__P__)).mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(ctx.getVar(\"d\",[]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setVar(\"B\", [], bigInt(\"4\").mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(ctx.getVar(\"d\",[]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.setSignal(\"x1_2\", [], bigInt(ctx.getSignal(\"in\", [\"0\"])).mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.setSignal(\"lamda\", [], bigInt(bigInt(bigInt(bigInt(\"3\").mul(bigInt(ctx.getSignal(\"x1_2\", []))).mod(__P__)).add(bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getVar(\"A\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__))).mod(__P__)).add(bigInt(\"1\")).mod(__P__)).mul( bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getVar(\"B\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"lamda\", [])).mul(bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getVar(\"B\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__))).mod(__P__), bigInt(bigInt(bigInt(\"3\").mul(bigInt(ctx.getSignal(\"x1_2\", []))).mod(__P__)).add(bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getVar(\"A\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__))).mod(__P__)).add(bigInt(\"1\")).mod(__P__), \"undefined:137:4\");\n    ctx.setSignal(\"out\", [\"0\"], bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"B\",[])).mul(bigInt(ctx.getSignal(\"lamda\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"lamda\", []))).mod(__P__)).add(__P__).sub(bigInt(ctx.getVar(\"A\",[]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(\"2\").mul(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__))).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(bigInt(ctx.getSignal(\"lamda\", [])).mul(bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"out\", [\"0\"]))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__));\n}\n",
  "MultiMux3": "function(ctx) {\n    ctx.setSignal(\"s10\", [], bigInt(ctx.getSignal(\"s\", [\"1\"])).mul(bigInt(ctx.getSignal(\"s\", [\"0\"]))).mod(__P__));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"a210\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(bigInt(bigInt(bigInt(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"7\"])).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"6\"]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"5\"]))).mod(__P__)).add(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"4\"]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"3\"]))).mod(__P__)).add(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"2\"]))).mod(__P__)).add(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"1\"]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"0\"]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"s10\", []))).mod(__P__));\n        ctx.setSignal(\"a21\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"6\"])).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"4\"]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"2\"]))).mod(__P__)).add(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"0\"]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"s\", [\"1\"]))).mod(__P__));\n        ctx.setSignal(\"a20\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"5\"])).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"4\"]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"1\"]))).mod(__P__)).add(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"0\"]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"s\", [\"0\"]))).mod(__P__));\n        ctx.setSignal(\"a2\", [ctx.getVar(\"i\",[])], bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"4\"])).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"0\"]))).mod(__P__));\n        ctx.setSignal(\"a10\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"3\"])).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"2\"]))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"1\"]))).mod(__P__)).add(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"0\"]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"s10\", []))).mod(__P__));\n        ctx.setSignal(\"a1\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"2\"])).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"0\"]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"s\", [\"1\"]))).mod(__P__));\n        ctx.setSignal(\"a0\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"0\"]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"s\", [\"0\"]))).mod(__P__));\n        ctx.setSignal(\"a\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"c\", [ctx.getVar(\"i\",[]),\"0\"]));\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(bigInt(ctx.getSignal(\"a210\", [ctx.getVar(\"i\",[])])).add(bigInt(ctx.getSignal(\"a21\", [ctx.getVar(\"i\",[])]))).mod(__P__)).add(bigInt(ctx.getSignal(\"a20\", [ctx.getVar(\"i\",[])]))).mod(__P__)).add(bigInt(ctx.getSignal(\"a2\", [ctx.getVar(\"i\",[])]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"s\", [\"2\"]))).mod(__P__)).add(bigInt(bigInt(bigInt(bigInt(ctx.getSignal(\"a10\", [ctx.getVar(\"i\",[])])).add(bigInt(ctx.getSignal(\"a1\", [ctx.getVar(\"i\",[])]))).mod(__P__)).add(bigInt(ctx.getSignal(\"a0\", [ctx.getVar(\"i\",[])]))).mod(__P__)).add(bigInt(ctx.getSignal(\"a\", [ctx.getVar(\"i\",[])]))).mod(__P__))).mod(__P__));\n    }\n\n     }\n}\n",
  "Mux3": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"8\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"mux\", [], \"c\", [\"0\",ctx.getVar(\"i\",[])], ctx.getSignal(\"c\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"3\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"mux\", [], \"s\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"s\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setSignal(\"out\", [], ctx.getPin(\"mux\", [], \"out\", [\"0\"]));\n}\n",
  "BinSum": "function(ctx) {\n    ctx.setVar(\"nout\", [], ctx.callFunction(\"nbits\", [bigInt(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__)).add(__P__).sub(bigInt(\"1\")).mod(__P__)).mul(bigInt(ctx.getVar(\"ops\",[]))).mod(__P__)]));\n    ctx.setVar(\"lin\", [], \"0\");\n    ctx.setVar(\"lout\", [], \"0\");\n    for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(ctx.getVar(\"ops\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setVar(\"lin\", [], bigInt(ctx.getVar(\"lin\",[])).add(bigInt(bigInt(ctx.getSignal(\"in\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"k\",[])), __P__))).mod(__P__))).mod(__P__));\n        }\n\n         }\n    }\n\n     }\n    for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(ctx.getVar(\"nout\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"k\",[])], bigInt(bigInt(ctx.getVar(\"k\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"lin\",[])).shr(bigInt(ctx.getVar(\"k\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\", \"undefined:85:8\");\n        ctx.setVar(\"lout\", [], bigInt(ctx.getVar(\"lout\",[])).add(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"k\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.assert(ctx.getVar(\"lin\",[]), ctx.getVar(\"lout\",[]), \"undefined:92:4\");\n}\n",
  "IsZero": "function(ctx) {\n    ctx.setSignal(\"inv\", [], bigInt((bigInt(ctx.getSignal(\"in\", [])).eq(bigInt(\"0\")) ? 0 : 1)).neq(bigInt(0)) ? (bigInt(\"1\").mul( bigInt(ctx.getSignal(\"in\", [])).inverse(__P__) ).mod(__P__)) : (\"0\"));\n    ctx.setSignal(\"out\", [], bigInt(bigInt(__P__.sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"inv\", []))).mod(__P__)).add(bigInt(\"1\")).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"in\", [])).mul(bigInt(ctx.getSignal(\"out\", []))).mod(__P__), \"0\", \"undefined:32:4\");\n}\n",
  "IsEqual": "function(ctx) {\n    ctx.setPin(\"isz\", [], \"in\", [], bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"isz\", [], \"out\", []));\n}\n",
  "ForceEqualIfEnabled": "function(ctx) {\n    ctx.setPin(\"isz\", [], \"in\", [], bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.assert(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"isz\", [], \"out\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"enabled\", []))).mod(__P__), \"0\", \"undefined:55:4\");\n}\n",
  "LessThan": "function(ctx) {\n    ctx.setPin(\"n2b\", [], \"in\", [], bigInt(bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(bigInt(ctx.getVar(\"n\",[])).greater(bigInt(256)) ? 0 : bigInt(\"1\").shl(bigInt(ctx.getVar(\"n\",[]))).and(__MASK__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"1\"]))).mod(__P__));\n    ctx.setSignal(\"out\", [], bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"n\",[])]))).mod(__P__));\n}\n",
  "LessEqThan": "function(ctx) {\n    ctx.setPin(\"lt\", [], \"in\", [\"0\"], ctx.getSignal(\"in\", [\"0\"]));\n    ctx.setPin(\"lt\", [], \"in\", [\"1\"], bigInt(ctx.getSignal(\"in\", [\"1\"])).add(bigInt(\"1\")).mod(__P__));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"lt\", [], \"out\", []));\n}\n",
  "GreaterThan": "function(ctx) {\n    ctx.setPin(\"lt\", [], \"in\", [\"0\"], ctx.getSignal(\"in\", [\"1\"]));\n    ctx.setPin(\"lt\", [], \"in\", [\"1\"], ctx.getSignal(\"in\", [\"0\"]));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"lt\", [], \"out\", []));\n}\n",
  "GreaterEqThan": "function(ctx) {\n    ctx.setPin(\"lt\", [], \"in\", [\"0\"], ctx.getSignal(\"in\", [\"1\"]));\n    ctx.setPin(\"lt\", [], \"in\", [\"1\"], bigInt(ctx.getSignal(\"in\", [\"0\"])).add(bigInt(\"1\")).mod(__P__));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"lt\", [], \"out\", []));\n}\n",
  "CompConstant": "function(ctx) {\n    ctx.setVar(\"sum\", [], \"0\");\n    ctx.setVar(\"b\", [], \"340282366920938463463374607431768211455\");\n    ctx.setVar(\"a\", [], \"1\");\n    ctx.setVar(\"e\", [], \"1\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"127\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"clsb\", [], bigInt(bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"ct\",[])).shr(bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.setVar(\"cmsb\", [], bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)).add(bigInt(\"1\")).mod(__P__)).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"ct\",[])).shr(bigInt(bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)).add(bigInt(\"1\")).mod(__P__))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.setVar(\"slsb\", [], ctx.getSignal(\"in\", [bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)]));\n        ctx.setVar(\"smsb\", [], ctx.getSignal(\"in\", [bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"2\")).mod(__P__)).add(bigInt(\"1\")).mod(__P__)]));\n        if (bigInt(bigInt((bigInt(ctx.getVar(\"cmsb\",[])).eq(bigInt(\"0\")) ? 1 : 0)).and(bigInt((bigInt(ctx.getVar(\"clsb\",[])).eq(bigInt(\"0\")) ? 1 : 0))).and(__MASK__)).neq(bigInt(0))) {\n        {\n            ctx.setSignal(\"parts\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(__P__.sub(bigInt(ctx.getVar(\"b\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__))).mod(__P__));\n        }\n\n        } else {\n        if (bigInt(bigInt((bigInt(ctx.getVar(\"cmsb\",[])).eq(bigInt(\"0\")) ? 1 : 0)).and(bigInt((bigInt(ctx.getVar(\"clsb\",[])).eq(bigInt(\"1\")) ? 1 : 0))).and(__MASK__)).neq(bigInt(0))) {\n        {\n            ctx.setSignal(\"parts\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n        }\n\n        } else {\n        if (bigInt(bigInt((bigInt(ctx.getVar(\"cmsb\",[])).eq(bigInt(\"1\")) ? 1 : 0)).and(bigInt((bigInt(ctx.getVar(\"clsb\",[])).eq(bigInt(\"0\")) ? 1 : 0))).and(__MASK__)).neq(bigInt(0))) {\n        {\n            ctx.setSignal(\"parts\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n        }\n\n        } else {\n        {\n            ctx.setSignal(\"parts\", [ctx.getVar(\"i\",[])], bigInt(bigInt(bigInt(__P__.sub(bigInt(ctx.getVar(\"a\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"smsb\",[]))).mod(__P__)).mul(bigInt(ctx.getVar(\"slsb\",[]))).mod(__P__)).add(bigInt(ctx.getVar(\"a\",[]))).mod(__P__));\n        }\n\n        }\n\n        }\n\n        }\n        ctx.setVar(\"sum\", [], bigInt(ctx.getVar(\"sum\",[])).add(bigInt(ctx.getSignal(\"parts\", [ctx.getVar(\"i\",[])]))).mod(__P__));\n        ctx.setVar(\"b\", [], bigInt(ctx.getVar(\"b\",[])).add(__P__).sub(bigInt(ctx.getVar(\"e\",[]))).mod(__P__));\n        ctx.setVar(\"a\", [], bigInt(ctx.getVar(\"a\",[])).add(bigInt(ctx.getVar(\"e\",[]))).mod(__P__));\n        ctx.setVar(\"e\", [], bigInt(ctx.getVar(\"e\",[])).mul(bigInt(\"2\")).mod(__P__));\n    }\n\n     }\n    ctx.setSignal(\"sout\", [], ctx.getVar(\"sum\",[]));\n    ctx.setPin(\"num2bits\", [], \"in\", [], ctx.getSignal(\"sout\", []));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"num2bits\", [], \"out\", [\"127\"]));\n}\n",
  "AliasCheck": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    ctx.setPin(\"compConstant\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]))\n     }\n    ctx.assert(ctx.getPin(\"compConstant\", [], \"out\", []), \"0\", \"undefined:31:4\");\n}\n",
  "Num2Bits": "function(ctx) {\n    ctx.setVar(\"lc1\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getVar(\"i\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getSignal(\"in\", [])).shr(bigInt(ctx.getVar(\"i\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\", \"undefined:31:8\");\n        ctx.setVar(\"lc1\", [], bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"i\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.assert(ctx.getVar(\"lc1\",[]), ctx.getSignal(\"in\", []), \"undefined:35:4\");\n}\n",
  "Num2Bits_strict": "function(ctx) {\n    ctx.setPin(\"n2b\", [], \"in\", [], ctx.getSignal(\"in\", []));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"aliasCheck\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2b\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n}\n",
  "Bits2Num": "function(ctx) {\n    ctx.setVar(\"lc1\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"lc1\", [], bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"i\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.setSignal(\"out\", [], ctx.getVar(\"lc1\",[]));\n}\n",
  "Bits2Num_strict": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"b2n\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"aliasCheck\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setSignal(\"out\", [], ctx.getPin(\"b2n\", [], \"out\", []));\n}\n",
  "Num2BitsNeg": "function(ctx) {\n    ctx.setVar(\"lc1\", [], \"0\");\n    ctx.setVar(\"neg\", [], bigInt((bigInt(ctx.getVar(\"n\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0)) ? (\"0\") : (bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__)));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getVar(\"i\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"neg\",[])).shr(bigInt(ctx.getVar(\"i\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\", \"undefined:92:8\");\n        ctx.setVar(\"lc1\", [], bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"i\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.setPin(\"isZero\", [], \"in\", [], ctx.getSignal(\"in\", []));\n    ctx.assert(bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getPin(\"isZero\", [], \"out\", [])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__))).mod(__P__))).mod(__P__), bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__)).add(__P__).sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__), \"undefined:100:4\");\n}\n",
  "WindowMulFix": "function(ctx) {\n    ctx.setPin(\"mux\", [], \"s\", [\"0\"], ctx.getSignal(\"in\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"s\", [\"1\"], ctx.getSignal(\"in\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"s\", [\"2\"], ctx.getSignal(\"in\", [\"2\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"0\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"dbl2\", [], \"in\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"dbl2\", [], \"in\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"1\"], ctx.getPin(\"dbl2\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"1\"], ctx.getPin(\"dbl2\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr3\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr3\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr3\", [], \"in2\", [\"0\"], ctx.getPin(\"dbl2\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr3\", [], \"in2\", [\"1\"], ctx.getPin(\"dbl2\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"2\"], ctx.getPin(\"adr3\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"2\"], ctx.getPin(\"adr3\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr4\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr4\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr4\", [], \"in2\", [\"0\"], ctx.getPin(\"adr3\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr4\", [], \"in2\", [\"1\"], ctx.getPin(\"adr3\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"3\"], ctx.getPin(\"adr4\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"3\"], ctx.getPin(\"adr4\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr5\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr5\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr5\", [], \"in2\", [\"0\"], ctx.getPin(\"adr4\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr5\", [], \"in2\", [\"1\"], ctx.getPin(\"adr4\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"4\"], ctx.getPin(\"adr5\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"4\"], ctx.getPin(\"adr5\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr6\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr6\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr6\", [], \"in2\", [\"0\"], ctx.getPin(\"adr5\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr6\", [], \"in2\", [\"1\"], ctx.getPin(\"adr5\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"5\"], ctx.getPin(\"adr6\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"5\"], ctx.getPin(\"adr6\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr7\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr7\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr7\", [], \"in2\", [\"0\"], ctx.getPin(\"adr6\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr7\", [], \"in2\", [\"1\"], ctx.getPin(\"adr6\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"6\"], ctx.getPin(\"adr7\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"6\"], ctx.getPin(\"adr7\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr8\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr8\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr8\", [], \"in2\", [\"0\"], ctx.getPin(\"adr7\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr8\", [], \"in2\", [\"1\"], ctx.getPin(\"adr7\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"7\"], ctx.getPin(\"adr8\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"7\"], ctx.getPin(\"adr8\", [], \"out\", [\"1\"]));\n    ctx.setSignal(\"out8\", [\"0\"], ctx.getPin(\"adr8\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"out8\", [\"1\"], ctx.getPin(\"adr8\", [], \"out\", [\"1\"]));\n    ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"mux\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"mux\", [], \"out\", [\"1\"]));\n}\n",
  "SegmentMulFix": "function(ctx) {\n    ctx.setPin(\"e2m\", [], \"in\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"e2m\", [], \"in\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"nWindows\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"base\", [\"0\"], ctx.getPin(\"e2m\", [], \"out\", [\"0\"]));\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"base\", [\"1\"], ctx.getPin(\"e2m\", [], \"out\", [\"1\"]));\n            ctx.setPin(\"cadders\", [ctx.getVar(\"i\",[])], \"in1\", [\"0\"], ctx.getPin(\"e2m\", [], \"out\", [\"0\"]));\n            ctx.setPin(\"cadders\", [ctx.getVar(\"i\",[])], \"in1\", [\"1\"], ctx.getPin(\"e2m\", [], \"out\", [\"1\"]));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"base\", [\"0\"], ctx.getPin(\"windows\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out8\", [\"0\"]));\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"base\", [\"1\"], ctx.getPin(\"windows\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out8\", [\"1\"]));\n            ctx.setPin(\"cadders\", [ctx.getVar(\"i\",[])], \"in1\", [\"0\"], ctx.getPin(\"cadders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n            ctx.setPin(\"cadders\", [ctx.getVar(\"i\",[])], \"in1\", [\"1\"], ctx.getPin(\"cadders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n        }\n\n        }\n        if (bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"cadders\", [ctx.getVar(\"i\",[])], \"in2\", [\"0\"], ctx.getPin(\"windows\", [ctx.getVar(\"i\",[])], \"out8\", [\"0\"]));\n            ctx.setPin(\"cadders\", [ctx.getVar(\"i\",[])], \"in2\", [\"1\"], ctx.getPin(\"windows\", [ctx.getVar(\"i\",[])], \"out8\", [\"1\"]));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"dblLast\", [], \"in\", [\"0\"], ctx.getPin(\"windows\", [ctx.getVar(\"i\",[])], \"out8\", [\"0\"]));\n            ctx.setPin(\"dblLast\", [], \"in\", [\"1\"], ctx.getPin(\"windows\", [ctx.getVar(\"i\",[])], \"out8\", [\"1\"]));\n            ctx.setPin(\"cadders\", [ctx.getVar(\"i\",[])], \"in2\", [\"0\"], ctx.getPin(\"dblLast\", [], \"out\", [\"0\"]));\n            ctx.setPin(\"cadders\", [ctx.getVar(\"i\",[])], \"in2\", [\"1\"], ctx.getPin(\"dblLast\", [], \"out\", [\"1\"]));\n        }\n\n        }\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"3\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"in\", [ctx.getVar(\"j\",[])], ctx.getSignal(\"e\", [bigInt(bigInt(\"3\").mul(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)).add(bigInt(ctx.getVar(\"j\",[]))).mod(__P__)]));\n        }\n\n         }\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"nWindows\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"in1\", [\"0\"], ctx.getPin(\"dblLast\", [], \"out\", [\"0\"]));\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"in1\", [\"1\"], ctx.getPin(\"dblLast\", [], \"out\", [\"1\"]));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"in1\", [\"0\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"in1\", [\"1\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n        }\n\n        }\n        ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"in2\", [\"0\"], ctx.getPin(\"windows\", [ctx.getVar(\"i\",[])], \"out\", [\"0\"]));\n        ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"in2\", [\"1\"], ctx.getPin(\"windows\", [ctx.getVar(\"i\",[])], \"out\", [\"1\"]));\n    }\n\n     }\n    ctx.setPin(\"m2e\", [], \"in\", [\"0\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n    ctx.setPin(\"m2e\", [], \"in\", [\"1\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n    ctx.setPin(\"cm2e\", [], \"in\", [\"0\"], ctx.getPin(\"cadders\", [bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n    ctx.setPin(\"cm2e\", [], \"in\", [\"1\"], ctx.getPin(\"cadders\", [bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n    ctx.setPin(\"cAdd\", [], \"x1\", [], ctx.getPin(\"m2e\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"cAdd\", [], \"y1\", [], ctx.getPin(\"m2e\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"cAdd\", [], \"x2\", [], __P__.sub(bigInt(ctx.getPin(\"cm2e\", [], \"out\", [\"0\"]))).mod(__P__));\n    ctx.setPin(\"cAdd\", [], \"y2\", [], ctx.getPin(\"cm2e\", [], \"out\", [\"1\"]));\n    ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"cAdd\", [], \"xout\", []));\n    ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"cAdd\", [], \"yout\", []));\n    ctx.setSignal(\"dbl\", [\"0\"], ctx.getPin(\"windows\", [bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out8\", [\"0\"]));\n    ctx.setSignal(\"dbl\", [\"1\"], ctx.getPin(\"windows\", [bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out8\", [\"1\"]));\n}\n",
  "EscalarMulFix": "function(ctx) {\n    ctx.setVar(\"nsegments\", [], bigInt(bigInt(bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).div( bigInt(\"246\"))).add(bigInt(\"1\")).mod(__P__));\n    ctx.setVar(\"nlastsegment\", [], bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(bigInt(bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).mul(bigInt(\"249\")).mod(__P__))).mod(__P__));\n    for (ctx.setVar(\"s\", [], \"0\");bigInt(bigInt(ctx.getVar(\"s\",[])).lt(bigInt(ctx.getVar(\"nsegments\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"s\", [], bigInt(ctx.getVar(\"s\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"nseg\", [], bigInt(bigInt(ctx.getVar(\"s\",[])).lt(bigInt(bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0)) ? (\"249\") : (ctx.getVar(\"nlastsegment\",[])));\n        ctx.setVar(\"nWindows\", [], bigInt(bigInt(bigInt(ctx.getVar(\"nseg\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).div( bigInt(\"3\"))).add(bigInt(\"1\")).mod(__P__));\n        for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"nseg\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"e\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"e\", [bigInt(bigInt(ctx.getVar(\"s\",[])).mul(bigInt(\"249\")).mod(__P__)).add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)]));\n        }\n\n         }\n        for (ctx.setVar(\"i\", [], ctx.getVar(\"nseg\",[]));bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(bigInt(ctx.getVar(\"nWindows\",[])).mul(bigInt(\"3\")).mod(__P__))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"e\", [ctx.getVar(\"i\",[])], \"0\");\n        }\n\n         }\n        if (bigInt((bigInt(ctx.getVar(\"s\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"base\", [\"0\"], ctx.getVar(\"BASE\",[\"0\"]));\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"base\", [\"1\"], ctx.getVar(\"BASE\",[\"1\"]));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"m2e\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"0\"], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"dbl\", [\"0\"]));\n            ctx.setPin(\"m2e\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"1\"], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"dbl\", [\"1\"]));\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"base\", [\"0\"], ctx.getPin(\"m2e\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"base\", [\"1\"], ctx.getPin(\"m2e\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n            if (bigInt((bigInt(ctx.getVar(\"s\",[])).eq(bigInt(\"1\")) ? 1 : 0)).neq(bigInt(0))) {\n            {\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"x1\", [], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"y1\", [], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n            }\n\n            } else {\n            {\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"x1\", [], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"xout\", []));\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"y1\", [], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"yout\", []));\n            }\n\n            }\n            ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"x2\", [], ctx.getPin(\"segments\", [ctx.getVar(\"s\",[])], \"out\", [\"0\"]));\n            ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"y2\", [], ctx.getPin(\"segments\", [ctx.getVar(\"s\",[])], \"out\", [\"1\"]));\n        }\n\n        }\n    }\n\n     }\n    if (bigInt((bigInt(ctx.getVar(\"nsegments\",[])).eq(bigInt(\"1\")) ? 1 : 0)).neq(bigInt(0))) {\n    {\n        ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"segments\", [\"0\"], \"out\", [\"0\"]));\n        ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"segments\", [\"0\"], \"out\", [\"1\"]));\n    }\n\n    } else {\n    {\n        ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"xout\", []));\n        ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"yout\", []));\n    }\n\n    }\n}\n",
  "BabyAdd": "function(ctx) {\n    ctx.setVar(\"a\", [], \"168700\");\n    ctx.setVar(\"d\", [], \"168696\");\n    ctx.setSignal(\"beta\", [], bigInt(ctx.getSignal(\"x1\", [])).mul(bigInt(ctx.getSignal(\"y2\", []))).mod(__P__));\n    ctx.setSignal(\"gamma\", [], bigInt(ctx.getSignal(\"y1\", [])).mul(bigInt(ctx.getSignal(\"x2\", []))).mod(__P__));\n    ctx.setSignal(\"delta\", [], bigInt(bigInt(bigInt(__P__.sub(bigInt(ctx.getVar(\"a\",[]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"x1\", []))).mod(__P__)).add(bigInt(ctx.getSignal(\"y1\", []))).mod(__P__)).mul(bigInt(bigInt(ctx.getSignal(\"x2\", [])).add(bigInt(ctx.getSignal(\"y2\", []))).mod(__P__))).mod(__P__));\n    ctx.setSignal(\"tau\", [], bigInt(ctx.getSignal(\"beta\", [])).mul(bigInt(ctx.getSignal(\"gamma\", []))).mod(__P__));\n    ctx.setSignal(\"xout\", [], bigInt(bigInt(ctx.getSignal(\"beta\", [])).add(bigInt(ctx.getSignal(\"gamma\", []))).mod(__P__)).mul( bigInt(bigInt(\"1\").add(bigInt(bigInt(ctx.getVar(\"d\",[])).mul(bigInt(ctx.getSignal(\"tau\", []))).mod(__P__))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(bigInt(\"1\").add(bigInt(bigInt(ctx.getVar(\"d\",[])).mul(bigInt(ctx.getSignal(\"tau\", []))).mod(__P__))).mod(__P__)).mul(bigInt(ctx.getSignal(\"xout\", []))).mod(__P__), bigInt(ctx.getSignal(\"beta\", [])).add(bigInt(ctx.getSignal(\"gamma\", []))).mod(__P__), \"undefined:45:4\");\n    ctx.setSignal(\"yout\", [], bigInt(bigInt(bigInt(ctx.getSignal(\"delta\", [])).add(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getSignal(\"beta\", []))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"gamma\", []))).mod(__P__)).mul( bigInt(bigInt(\"1\").add(__P__).sub(bigInt(bigInt(ctx.getVar(\"d\",[])).mul(bigInt(ctx.getSignal(\"tau\", []))).mod(__P__))).mod(__P__)).inverse(__P__) ).mod(__P__));\n    ctx.assert(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(bigInt(ctx.getVar(\"d\",[])).mul(bigInt(ctx.getSignal(\"tau\", []))).mod(__P__))).mod(__P__)).mul(bigInt(ctx.getSignal(\"yout\", []))).mod(__P__), bigInt(bigInt(ctx.getSignal(\"delta\", [])).add(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getSignal(\"beta\", []))).mod(__P__))).mod(__P__)).add(__P__).sub(bigInt(ctx.getSignal(\"gamma\", []))).mod(__P__), \"undefined:48:4\");\n}\n",
  "BabyDbl": "function(ctx) {\n    ctx.setPin(\"adder\", [], \"x1\", [], ctx.getSignal(\"x\", []));\n    ctx.setPin(\"adder\", [], \"y1\", [], ctx.getSignal(\"y\", []));\n    ctx.setPin(\"adder\", [], \"x2\", [], ctx.getSignal(\"x\", []));\n    ctx.setPin(\"adder\", [], \"y2\", [], ctx.getSignal(\"y\", []));\n    ctx.setSignal(\"xout\", [], ctx.getPin(\"adder\", [], \"xout\", []));\n    ctx.setSignal(\"yout\", [], ctx.getPin(\"adder\", [], \"yout\", []));\n}\n",
  "BabyCheck": "function(ctx) {\n    ctx.setVar(\"a\", [], \"168700\");\n    ctx.setVar(\"d\", [], \"168696\");\n    ctx.setSignal(\"x2\", [], bigInt(ctx.getSignal(\"x\", [])).mul(bigInt(ctx.getSignal(\"x\", []))).mod(__P__));\n    ctx.setSignal(\"y2\", [], bigInt(ctx.getSignal(\"y\", [])).mul(bigInt(ctx.getSignal(\"y\", []))).mod(__P__));\n    ctx.assert(bigInt(bigInt(ctx.getVar(\"a\",[])).mul(bigInt(ctx.getSignal(\"x2\", []))).mod(__P__)).add(bigInt(ctx.getSignal(\"y2\", []))).mod(__P__), bigInt(\"1\").add(bigInt(bigInt(bigInt(ctx.getVar(\"d\",[])).mul(bigInt(ctx.getSignal(\"x2\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"y2\", []))).mod(__P__))).mod(__P__), \"undefined:81:4\");\n}\n",
  "BabyPbk": "function(ctx) {\n    ctx.setVar(\"BASE8\", [], [\"5299619240641551281634865583518297030282874472190772894086521144482721001553\",\"16950150798460657717958625567821834550301663161624707787222815936182638968203\"]);\n    ctx.setPin(\"pvkBits\", [], \"in\", [], ctx.getSignal(\"in\", []));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"253\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"mulFix\", [], \"e\", [ctx.getVar(\"i\",[])], ctx.getPin(\"pvkBits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setSignal(\"Ax\", [], ctx.getPin(\"mulFix\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"Ay\", [], ctx.getPin(\"mulFix\", [], \"out\", [\"1\"]));\n}\n",
  "Window4": "function(ctx) {\n    ctx.setPin(\"mux\", [], \"s\", [\"0\"], ctx.getSignal(\"in\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"s\", [\"1\"], ctx.getSignal(\"in\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"s\", [\"2\"], ctx.getSignal(\"in\", [\"2\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"0\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"dbl2\", [], \"in\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"dbl2\", [], \"in\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"1\"], ctx.getPin(\"dbl2\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"1\"], ctx.getPin(\"dbl2\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr3\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr3\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr3\", [], \"in2\", [\"0\"], ctx.getPin(\"dbl2\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr3\", [], \"in2\", [\"1\"], ctx.getPin(\"dbl2\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"2\"], ctx.getPin(\"adr3\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"2\"], ctx.getPin(\"adr3\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr4\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr4\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr4\", [], \"in2\", [\"0\"], ctx.getPin(\"adr3\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr4\", [], \"in2\", [\"1\"], ctx.getPin(\"adr3\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"3\"], ctx.getPin(\"adr4\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"3\"], ctx.getPin(\"adr4\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr5\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr5\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr5\", [], \"in2\", [\"0\"], ctx.getPin(\"adr4\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr5\", [], \"in2\", [\"1\"], ctx.getPin(\"adr4\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"4\"], ctx.getPin(\"adr5\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"4\"], ctx.getPin(\"adr5\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr6\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr6\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr6\", [], \"in2\", [\"0\"], ctx.getPin(\"adr5\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr6\", [], \"in2\", [\"1\"], ctx.getPin(\"adr5\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"5\"], ctx.getPin(\"adr6\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"5\"], ctx.getPin(\"adr6\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr7\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr7\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr7\", [], \"in2\", [\"0\"], ctx.getPin(\"adr6\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr7\", [], \"in2\", [\"1\"], ctx.getPin(\"adr6\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"6\"], ctx.getPin(\"adr7\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"6\"], ctx.getPin(\"adr7\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adr8\", [], \"in1\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"adr8\", [], \"in1\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    ctx.setPin(\"adr8\", [], \"in2\", [\"0\"], ctx.getPin(\"adr7\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adr8\", [], \"in2\", [\"1\"], ctx.getPin(\"adr7\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"0\",\"7\"], ctx.getPin(\"adr8\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"mux\", [], \"c\", [\"1\",\"7\"], ctx.getPin(\"adr8\", [], \"out\", [\"1\"]));\n    ctx.setSignal(\"out8\", [\"0\"], ctx.getPin(\"adr8\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"out8\", [\"1\"], ctx.getPin(\"adr8\", [], \"out\", [\"1\"]));\n    ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"mux\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(bigInt(bigInt(__P__.sub(bigInt(ctx.getPin(\"mux\", [], \"out\", [\"1\"]))).mod(__P__)).mul(bigInt(\"2\")).mod(__P__)).mul(bigInt(ctx.getSignal(\"in\", [\"3\"]))).mod(__P__)).add(bigInt(ctx.getPin(\"mux\", [], \"out\", [\"1\"]))).mod(__P__));\n}\n",
  "Segment": "function(ctx) {\n    ctx.setPin(\"e2m\", [], \"in\", [\"0\"], ctx.getSignal(\"base\", [\"0\"]));\n    ctx.setPin(\"e2m\", [], \"in\", [\"1\"], ctx.getSignal(\"base\", [\"1\"]));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"nWindows\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"base\", [\"0\"], ctx.getPin(\"e2m\", [], \"out\", [\"0\"]));\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"base\", [\"1\"], ctx.getPin(\"e2m\", [], \"out\", [\"1\"]));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"doublers1\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"0\"], ctx.getPin(\"windows\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out8\", [\"0\"]));\n            ctx.setPin(\"doublers1\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"1\"], ctx.getPin(\"windows\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out8\", [\"1\"]));\n            ctx.setPin(\"doublers2\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"0\"], ctx.getPin(\"doublers1\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n            ctx.setPin(\"doublers2\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"1\"], ctx.getPin(\"doublers1\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"base\", [\"0\"], ctx.getPin(\"doublers2\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"base\", [\"1\"], ctx.getPin(\"doublers2\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n            if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"1\")) ? 1 : 0)).neq(bigInt(0))) {\n            {\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in1\", [\"0\"], ctx.getPin(\"windows\", [\"0\"], \"out\", [\"0\"]));\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in1\", [\"1\"], ctx.getPin(\"windows\", [\"0\"], \"out\", [\"1\"]));\n            }\n\n            } else {\n            {\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in1\", [\"0\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"out\", [\"0\"]));\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in1\", [\"1\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"out\", [\"1\"]));\n            }\n\n            }\n            ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in2\", [\"0\"], ctx.getPin(\"windows\", [ctx.getVar(\"i\",[])], \"out\", [\"0\"]));\n            ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in2\", [\"1\"], ctx.getPin(\"windows\", [ctx.getVar(\"i\",[])], \"out\", [\"1\"]));\n        }\n\n        }\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"4\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"windows\", [ctx.getVar(\"i\",[])], \"in\", [ctx.getVar(\"j\",[])], ctx.getSignal(\"in\", [bigInt(bigInt(\"4\").mul(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)).add(bigInt(ctx.getVar(\"j\",[]))).mod(__P__)]));\n        }\n\n         }\n    }\n\n     }\n    if (bigInt(bigInt(ctx.getVar(\"nWindows\",[])).gt(bigInt(\"1\")) ? 1 : 0).neq(bigInt(0))) {\n    {\n        ctx.setPin(\"m2e\", [], \"in\", [\"0\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"out\", [\"0\"]));\n        ctx.setPin(\"m2e\", [], \"in\", [\"1\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nWindows\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"out\", [\"1\"]));\n    }\n\n    } else {\n    {\n        ctx.setPin(\"m2e\", [], \"in\", [\"0\"], ctx.getPin(\"windows\", [\"0\"], \"out\", [\"0\"]));\n        ctx.setPin(\"m2e\", [], \"in\", [\"1\"], ctx.getPin(\"windows\", [\"0\"], \"out\", [\"1\"]));\n    }\n\n    }\n    ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"m2e\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"m2e\", [], \"out\", [\"1\"]));\n}\n",
  "Pedersen": "function(ctx) {\n    ctx.setVar(\"BASE\", [], [[\"10457101036533406547632367118273992217979173478358440826365724437999023779287\",\"19824078218392094440610104313265183977899662750282163392862422243483260492317\"],[\"2671756056509184035029146175565761955751135805354291559563293617232983272177\",\"2663205510731142763556352975002641716101654201788071096152948830924149045094\"],[\"5802099305472655231388284418920769829666717045250560929368476121199858275951\",\"5980429700218124965372158798884772646841287887664001482443826541541529227896\"],[\"7107336197374528537877327281242680114152313102022415488494307685842428166594\",\"2857869773864086953506483169737724679646433914307247183624878062391496185654\"],[\"20265828622013100949498132415626198973119240347465898028410217039057588424236\",\"1160461593266035632937973507065134938065359936056410650153315956301179689506\"],[\"1487999857809287756929114517587739322941449154962237464737694709326309567994\",\"14017256862867289575056460215526364897734808720610101650676790868051368668003\"],[\"14618644331049802168996997831720384953259095788558646464435263343433563860015\",\"13115243279999696210147231297848654998887864576952244320558158620692603342236\"],[\"6814338563135591367010655964669793483652536871717891893032616415581401894627\",\"13660303521961041205824633772157003587453809761793065294055279768121314853695\"],[\"3571615583211663069428808372184817973703476260057504149923239576077102575715\",\"11981351099832644138306422070127357074117642951423551606012551622164230222506\"],[\"18597552580465440374022635246985743886550544261632147935254624835147509493269\",\"6753322320275422086923032033899357299485124665258735666995435957890214041481\"]]);\n    ctx.setVar(\"nSegments\", [], bigInt(bigInt(bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).div( bigInt(\"200\"))).add(bigInt(\"1\")).mod(__P__));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"nSegments\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"nBits\", [], bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(bigInt(ctx.getVar(\"nSegments\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0)).neq(bigInt(0)) ? (bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(bigInt(bigInt(ctx.getVar(\"nSegments\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).mul(bigInt(\"200\")).mod(__P__))).mod(__P__)) : (\"200\"));\n        ctx.setVar(\"nWindows\", [], bigInt(bigInt(bigInt(ctx.getVar(\"nBits\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).div( bigInt(\"4\"))).add(bigInt(\"1\")).mod(__P__));\n        ctx.setPin(\"segments\", [ctx.getVar(\"i\",[])], \"base\", [\"0\"], ctx.getVar(\"BASE\",[ctx.getVar(\"i\",[]),\"0\"]));\n        ctx.setPin(\"segments\", [ctx.getVar(\"i\",[])], \"base\", [\"1\"], ctx.getVar(\"BASE\",[ctx.getVar(\"i\",[]),\"1\"]));\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(ctx.getVar(\"nBits\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"segments\", [ctx.getVar(\"i\",[])], \"in\", [ctx.getVar(\"j\",[])], ctx.getSignal(\"in\", [bigInt(bigInt(ctx.getVar(\"i\",[])).mul(bigInt(\"200\")).mod(__P__)).add(bigInt(ctx.getVar(\"j\",[]))).mod(__P__)]));\n        }\n\n         }\n        for (ctx.setVar(\"j\", [], ctx.getVar(\"nBits\",[]));bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(bigInt(ctx.getVar(\"nWindows\",[])).mul(bigInt(\"4\")).mod(__P__))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"segments\", [ctx.getVar(\"i\",[])], \"in\", [ctx.getVar(\"j\",[])], \"0\");\n        }\n\n         }\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(bigInt(ctx.getVar(\"nSegments\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"x1\", [], ctx.getPin(\"segments\", [\"0\"], \"out\", [\"0\"]));\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"y1\", [], ctx.getPin(\"segments\", [\"0\"], \"out\", [\"1\"]));\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"x2\", [], ctx.getPin(\"segments\", [\"1\"], \"out\", [\"0\"]));\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"y2\", [], ctx.getPin(\"segments\", [\"1\"], \"out\", [\"1\"]));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"x1\", [], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"xout\", []));\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"y1\", [], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"yout\", []));\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"x2\", [], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n            ctx.setPin(\"adders\", [ctx.getVar(\"i\",[])], \"y2\", [], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n        }\n\n        }\n    }\n\n     }\n    if (bigInt(bigInt(ctx.getVar(\"nSegments\",[])).gt(bigInt(\"1\")) ? 1 : 0).neq(bigInt(0))) {\n    {\n        ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nSegments\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"xout\", []));\n        ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nSegments\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"yout\", []));\n    }\n\n    } else {\n    {\n        ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"segments\", [\"0\"], \"out\", [\"0\"]));\n        ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"segments\", [\"0\"], \"out\", [\"1\"]));\n    }\n\n    }\n}\n",
  "MiMCSponge": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"nInputs\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"S\", [ctx.getVar(\"i\",[])], \"k\", [], ctx.getSignal(\"k\", []));\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"S\", [ctx.getVar(\"i\",[])], \"xL_in\", [], ctx.getSignal(\"ins\", [\"0\"]));\n            ctx.setPin(\"S\", [ctx.getVar(\"i\",[])], \"xR_in\", [], \"0\");\n        }\n\n        } else {\n        {\n            ctx.setPin(\"S\", [ctx.getVar(\"i\",[])], \"xL_in\", [], bigInt(ctx.getPin(\"S\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"xL_out\", [])).add(bigInt(ctx.getSignal(\"ins\", [ctx.getVar(\"i\",[])]))).mod(__P__));\n            ctx.setPin(\"S\", [ctx.getVar(\"i\",[])], \"xR_in\", [], ctx.getPin(\"S\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"xR_out\", []));\n        }\n\n        }\n    }\n\n     }\n    ctx.setSignal(\"outs\", [\"0\"], ctx.getPin(\"S\", [bigInt(ctx.getVar(\"nInputs\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"xL_out\", []));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(bigInt(ctx.getVar(\"nOutputs\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"S\", [bigInt(ctx.getVar(\"nInputs\",[])).add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)], \"k\", [], ctx.getSignal(\"k\", []));\n        ctx.setPin(\"S\", [bigInt(ctx.getVar(\"nInputs\",[])).add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)], \"xL_in\", [], ctx.getPin(\"S\", [bigInt(bigInt(ctx.getVar(\"nInputs\",[])).add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"xL_out\", []));\n        ctx.setPin(\"S\", [bigInt(ctx.getVar(\"nInputs\",[])).add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)], \"xR_in\", [], ctx.getPin(\"S\", [bigInt(bigInt(ctx.getVar(\"nInputs\",[])).add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"xR_out\", []));\n        ctx.setSignal(\"outs\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__)], ctx.getPin(\"S\", [bigInt(ctx.getVar(\"nInputs\",[])).add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)], \"xL_out\", []));\n    }\n\n     }\n}\n",
  "MiMCFeistel": "function(ctx) {\n    ctx.setVar(\"c\", [], [\"0\",\"7120861356467848435263064379192047478074060781135320967663101236819528304084\",\"5024705281721889198577876690145313457398658950011302225525409148828000436681\",\"17980351014018068290387269214713820287804403312720763401943303895585469787384\",\"19886576439381707240399940949310933992335779767309383709787331470398675714258\",\"1213715278223786725806155661738676903520350859678319590331207960381534602599\",\"18162138253399958831050545255414688239130588254891200470934232514682584734511\",\"7667462281466170157858259197976388676420847047604921256361474169980037581876\",\"7207551498477838452286210989212982851118089401128156132319807392460388436957\",\"9864183311657946807255900203841777810810224615118629957816193727554621093838\",\"4798196928559910300796064665904583125427459076060519468052008159779219347957\",\"17387238494588145257484818061490088963673275521250153686214197573695921400950\",\"10005334761930299057035055370088813230849810566234116771751925093634136574742\",\"11897542014760736209670863723231849628230383119798486487899539017466261308762\",\"16771780563523793011283273687253985566177232886900511371656074413362142152543\",\"749264854018824809464168489785113337925400687349357088413132714480582918506\",\"3683645737503705042628598550438395339383572464204988015434959428676652575331\",\"7556750851783822914673316211129907782679509728346361368978891584375551186255\",\"20391289379084797414557439284689954098721219201171527383291525676334308303023\",\"18146517657445423462330854383025300323335289319277199154920964274562014376193\",\"8080173465267536232534446836148661251987053305394647905212781979099916615292\",\"10796443006899450245502071131975731672911747129805343722228413358507805531141\",\"5404287610364961067658660283245291234008692303120470305032076412056764726509\",\"4623894483395123520243967718315330178025957095502546813929290333264120223168\",\"16845753148201777192406958674202574751725237939980634861948953189320362207797\",\"4622170486584704769521001011395820886029808520586507873417553166762370293671\",\"16688277490485052681847773549197928630624828392248424077804829676011512392564\",\"11878652861183667748838188993669912629573713271883125458838494308957689090959\",\"2436445725746972287496138382764643208791713986676129260589667864467010129482\",\"1888098689545151571063267806606510032698677328923740058080630641742325067877\",\"148924106504065664829055598316821983869409581623245780505601526786791681102\",\"18875020877782404439294079398043479420415331640996249745272087358069018086569\",\"15189693413320228845990326214136820307649565437237093707846682797649429515840\",\"19669450123472657781282985229369348220906547335081730205028099210442632534079\",\"5521922218264623411380547905210139511350706092570900075727555783240701821773\",\"4144769320246558352780591737261172907511489963810975650573703217887429086546\",\"10097732913112662248360143041019433907849917041759137293018029019134392559350\",\"1720059427972723034107765345743336447947522473310069975142483982753181038321\",\"6302388219880227251325608388535181451187131054211388356563634768253301290116\",\"6745410632962119604799318394592010194450845483518862700079921360015766217097\",\"10858157235265583624235850660462324469799552996870780238992046963007491306222\",\"20241898894740093733047052816576694435372877719072347814065227797906130857593\",\"10165780782761211520836029617746977303303335603838343292431760011576528327409\",\"2832093654883670345969792724123161241696170611611744759675180839473215203706\",\"153011722355526826233082383360057587249818749719433916258246100068258954737\",\"20196970640587451358539129330170636295243141659030208529338914906436009086943\",\"3180973917010545328313139835982464870638521890385603025657430208141494469656\",\"17198004293191777441573635123110935015228014028618868252989374962722329283022\",\"7642160509228669138628515458941659189680509753651629476399516332224325757132\",\"19346204940546791021518535594447257347218878114049998691060016493806845179755\",\"11501810868606870391127866188394535330696206817602260610801897042898616817272\",\"3113973447392053821824427670386252797811804954746053461397972968381571297505\",\"6545064306297957002139416752334741502722251869537551068239642131448768236585\",\"5203908808704813498389265425172875593837960384349653691918590736979872578408\",\"2246692432011290582160062129070762007374502637007107318105405626910313810224\",\"11760570435432189127645691249600821064883781677693087773459065574359292849137\",\"5543749482491340532547407723464609328207990784853381797689466144924198391839\",\"8837549193990558762776520822018694066937602576881497343584903902880277769302\",\"12855514863299373699594410385788943772765811961581749194183533625311486462501\",\"5363660674689121676875069134269386492382220935599781121306637800261912519729\",\"13162342403579303950549728848130828093497701266240457479693991108217307949435\",\"916941639326869583414469202910306428966657806899788970948781207501251816730\",\"15618589556584434434009868216186115416835494805174158488636000580759692174228\",\"8959562060028569701043973060670353733575345393653685776974948916988033453971\",\"16390754464333401712265575949874369157699293840516802426621216808905079127650\",\"168282396747788514908709091757591226095443902501365500003618183905496160435\",\"8327443473179334761744301768309008451162322941906921742120510244986704677004\",\"17213012626801210615058753489149961717422101711567228037597150941152495100640\",\"10394369641533736715250242399198097296122982486516256408681925424076248952280\",\"17784386835392322654196171115293700800825771210400152504776806618892170162248\",\"16533189939837087893364000390641148516479148564190420358849587959161226782982\",\"18725396114211370207078434315900726338547621160475533496863298091023511945076\",\"7132325028834551397904855671244375895110341505383911719294705267624034122405\",\"148317947440800089795933930720822493695520852448386394775371401743494965187\",\"19001050671757720352890779127693793630251266879994702723636759889378387053056\",\"18824274411769830274877839365728651108434404855803844568234862945613766611460\",\"12771414330193951156383998390424063470766226667986423961689712557338777174205\",\"11332046574800279729678603488745295198038913503395629790213378101166488244657\",\"9607550223176946388146938069307456967842408600269548190739947540821716354749\",\"8756385288462344550200229174435953103162307705310807828651304665320046782583\",\"176061952957067086877570020242717222844908281373122372938833890096257042779\",\"12200212977482648306758992405065921724409841940671166017620928947866825250857\",\"10868453624107875516866146499877130701929063632959660262366632833504750028858\",\"2016095394399807253596787752134573207202567875457560571095586743878953450738\",\"21815578223768330433802113452339488275704145896544481092014911825656390567514\",\"4923772847693564777744725640710197015181591950368494148029046443433103381621\",\"1813584943682214789802230765734821149202472893379265320098816901270224589984\",\"10810123816265612772922113403831964815724109728287572256602010709288980656498\",\"1153669123397255702524721206511185557982017410156956216465120456256288427021\",\"5007518659266430200134478928344522649876467369278722765097865662497773767152\",\"2511432546938591792036639990606464315121646668029252285288323664350666551637\",\"32883284540320451295484135704808083452381176816565850047310272290579727564\",\"10484856914279112612610993418405543310546746652738541161791501150994088679557\",\"2026733759645519472558796412979210009170379159866522399881566309631434814953\",\"14731806221235869882801331463708736361296174006732553130708107037190460654379\",\"14740327483193277147065845135561988641238516852487657117813536909482068950652\",\"18787428285295558781869865751953016580493190547148386433580291216673009884554\",\"3804047064713122820157099453648459188816376755739202017447862327783289895072\",\"16709604795697901641948603019242067672006293290826991671766611326262532802914\",\"11061717085931490100602849654034280576915102867237101935487893025907907250695\",\"2821730726367472966906149684046356272806484545281639696873240305052362149654\",\"17467794879902895769410571945152708684493991588672014763135370927880883292655\",\"1571520786233540988201616650622796363168031165456869481368085474420849243232\",\"10041051776251223165849354194892664881051125330236567356945669006147134614302\",\"3981753758468103976812813304477670033098707002886030847251581853700311567551\",\"4365864398105436789177703571412645548020537580493599380018290523813331678900\",\"2391801327305361293476178683853802679507598622000359948432171562543560193350\",\"214219368547551689972421167733597094823289857206402800635962137077096090722\",\"18192064100315141084242006659317257023098826945893371479835220462302399655674\",\"15487549757142039139328911515400805508248576685795694919457041092150651939253\",\"10142447197759703415402259672441315777933858467700579946665223821199077641122\",\"11246573086260753259993971254725613211193686683988426513880826148090811891866\",\"6574066859860991369704567902211886840188702386542112593710271426704432301235\",\"11311085442652291634822798307831431035776248927202286895207125867542470350078\",\"20977948360215259915441258687649465618185769343138135384346964466965010873779\",\"792781492853909872425531014397300057232399608769451037135936617996830018501\",\"5027602491523497423798779154966735896562099398367163998686335127580757861872\",\"14595204575654316237672764823862241845410365278802914304953002937313300553572\",\"13973538843621261113924259058427434053808430378163734641175100160836376897004\",\"16395063164993626722686882727042150241125309409717445381854913964674649318585\",\"8465768840047024550750516678171433288207841931251654898809033371655109266663\",\"21345603324471810861925019445720576814602636473739003852898308205213912255830\",\"21171984405852590343970239018692870799717057961108910523876770029017785940991\",\"10761027113757988230637066281488532903174559953630210849190212601991063767647\",\"6678298831065390834922566306988418588227382406175769592902974103663687992230\",\"4993662582188632374202316265508850988596880036291765531885657575099537176757\",\"18364168158495573675698600238443218434246806358811328083953887470513967121206\",\"3506345610354615013737144848471391553141006285964325596214723571988011984829\",\"248732676202643792226973868626360612151424823368345645514532870586234380100\",\"10090204501612803176317709245679152331057882187411777688746797044706063410969\",\"21297149835078365363970699581821844234354988617890041296044775371855432973500\",\"16729368143229828574342820060716366330476985824952922184463387490091156065099\",\"4467191506765339364971058668792642195242197133011672559453028147641428433293\",\"8677548159358013363291014307402600830078662555833653517843708051504582990832\",\"1022951765127126818581466247360193856197472064872288389992480993218645055345\",\"1888195070251580606973417065636430294417895423429240431595054184472931224452\",\"4221265384902749246920810956363310125115516771964522748896154428740238579824\",\"2825393571154632139467378429077438870179957021959813965940638905853993971879\",\"19171031072692942278056619599721228021635671304612437350119663236604712493093\",\"10780807212297131186617505517708903709488273075252405602261683478333331220733\",\"18230936781133176044598070768084230333433368654744509969087239465125979720995\",\"16901065971871379877929280081392692752968612240624985552337779093292740763381\",\"146494141603558321291767829522948454429758543710648402457451799015963102253\",\"2492729278659146790410698334997955258248120870028541691998279257260289595548\",\"2204224910006646535594933495262085193210692406133533679934843341237521233504\",\"16062117410185840274616925297332331018523844434907012275592638570193234893570\",\"5894928453677122829055071981254202951712129328678534592916926069506935491729\",\"4947482739415078212217504789923078546034438919537985740403824517728200332286\",\"16143265650645676880461646123844627780378251900510645261875867423498913438066\",\"397690828254561723549349897112473766901585444153303054845160673059519614409\",\"11272653598912269895509621181205395118899451234151664604248382803490621227687\",\"15566927854306879444693061574322104423426072650522411176731130806720753591030\",\"14222898219492484180162096141564251903058269177856173968147960855133048449557\",\"16690275395485630428127725067513114066329712673106153451801968992299636791385\",\"3667030990325966886479548860429670833692690972701471494757671819017808678584\",\"21280039024501430842616328642522421302481259067470872421086939673482530783142\",\"15895485136902450169492923978042129726601461603404514670348703312850236146328\",\"7733050956302327984762132317027414325566202380840692458138724610131603812560\",\"438123800976401478772659663183448617575635636575786782566035096946820525816\",\"814913922521637742587885320797606426167962526342166512693085292151314976633\",\"12368712287081330853637674140264759478736012797026621876924395982504369598764\",\"2494806857395134874309386694756263421445039103814920780777601708371037591569\",\"16101132301514338989512946061786320637179843435886825102406248183507106312877\",\"6252650284989960032925831409804233477770646333900692286731621844532438095656\",\"9277135875276787021836189566799935097400042171346561246305113339462708861695\",\"10493603554686607050979497281838644324893776154179810893893660722522945589063\",\"8673089750662709235894359384294076697329948991010184356091130382437645649279\",\"9558393272910366944245875920138649617479779893610128634419086981339060613250\",\"19012287860122586147374214541764572282814469237161122489573881644994964647218\",\"9783723818270121678386992630754842961728702994964214799008457449989291229500\",\"15550788416669474113213749561488122552422887538676036667630838378023479382689\",\"15016165746156232864069722572047169071786333815661109750860165034341572904221\",\"6506225705710197163670556961299945987488979904603689017479840649664564978574\",\"10796631184889302076168355684722130903785890709107732067446714470783437829037\",\"19871836214837460419845806980869387567383718044439891735114283113359312279540\",\"20871081766843466343749609089986071784031203517506781251203251608363835140622\",\"5100105771517691442278432864090229416166996183792075307747582375962855820797\",\"8777887112076272395250620301071581171386440850451972412060638225741125310886\",\"5300440870136391278944213332144327695659161151625757537632832724102670898756\",\"1205448543652932944633962232545707633928124666868453915721030884663332604536\",\"5542499997310181530432302492142574333860449305424174466698068685590909336771\",\"11028094245762332275225364962905938096659249161369092798505554939952525894293\",\"19187314764836593118404597958543112407224947638377479622725713735224279297009\",\"17047263688548829001253658727764731047114098556534482052135734487985276987385\",\"19914849528178967155534624144358541535306360577227460456855821557421213606310\",\"2929658084700714257515872921366736697080475676508114973627124569375444665664\",\"15092262360719700162343163278648422751610766427236295023221516498310468956361\",\"21578580340755653236050830649990190843552802306886938815497471545814130084980\",\"1258781501221760320019859066036073675029057285507345332959539295621677296991\",\"3819598418157732134449049289585680301176983019643974929528867686268702720163\",\"8653175945487997845203439345797943132543211416447757110963967501177317426221\",\"6614652990340435611114076169697104582524566019034036680161902142028967568142\",\"19212515502973904821995111796203064175854996071497099383090983975618035391558\",\"18664315914479294273286016871365663486061896605232511201418576829062292269769\",\"11498264615058604317482574216318586415670903094838791165247179252175768794889\",\"10814026414212439999107945133852431304483604215416531759535467355316227331774\",\"17566185590731088197064706533119299946752127014428399631467913813769853431107\",\"14016139747289624978792446847000951708158212463304817001882956166752906714332\",\"8242601581342441750402731523736202888792436665415852106196418942315563860366\",\"9244680976345080074252591214216060854998619670381671198295645618515047080988\",\"12216779172735125538689875667307129262237123728082657485828359100719208190116\",\"10702811721859145441471328511968332847175733707711670171718794132331147396634\",\"6479667912792222539919362076122453947926362746906450079329453150607427372979\",\"15117544653571553820496948522381772148324367479772362833334593000535648316185\",\"6842203153996907264167856337497139692895299874139131328642472698663046726780\",\"12732823292801537626009139514048596316076834307941224506504666470961250728055\",\"6936272626871035740815028148058841877090860312517423346335878088297448888663\",\"17297554111853491139852678417579991271009602631577069694853813331124433680030\",\"16641596134749940573104316021365063031319260205559553673368334842484345864859\",\"7400481189785154329569470986896455371037813715804007747228648863919991399081\",\"2273205422216987330510475127669563545720586464429614439716564154166712854048\",\"15162538063742142685306302282127534305212832649282186184583465569986719234456\",\"5628039096440332922248578319648483863204530861778160259559031331287721255522\",\"16085392195894691829567913404182676871326863890140775376809129785155092531260\",\"14227467863135365427954093998621993651369686288941275436795622973781503444257\",\"18224457394066545825553407391290108485121649197258948320896164404518684305122\",\"274945154732293792784580363548970818611304339008964723447672490026510689427\",\"11050822248291117548220126630860474473945266276626263036056336623671308219529\",\"2119542016932434047340813757208803962484943912710204325088879681995922344971\",\"0\"]);\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"nrounds\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"t\", [], bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0)) ? (bigInt(ctx.getSignal(\"k\", [])).add(bigInt(ctx.getSignal(\"xL_in\", []))).mod(__P__)) : (bigInt(bigInt(ctx.getSignal(\"k\", [])).add(bigInt(ctx.getSignal(\"xL\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)]))).mod(__P__)).add(bigInt(ctx.getVar(\"c\",[ctx.getVar(\"i\",[])]))).mod(__P__)));\n        ctx.setSignal(\"t2\", [ctx.getVar(\"i\",[])], bigInt(ctx.getVar(\"t\",[])).mul(bigInt(ctx.getVar(\"t\",[]))).mod(__P__));\n        ctx.setSignal(\"t4\", [ctx.getVar(\"i\",[])], bigInt(ctx.getSignal(\"t2\", [ctx.getVar(\"i\",[])])).mul(bigInt(ctx.getSignal(\"t2\", [ctx.getVar(\"i\",[])]))).mod(__P__));\n        if (bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(bigInt(ctx.getVar(\"nrounds\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0))) {\n        {\n            ctx.setSignal(\"xL\", [ctx.getVar(\"i\",[])], bigInt(bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0)) ? (ctx.getSignal(\"xR_in\", [])) : (ctx.getSignal(\"xR\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)]))).add(bigInt(bigInt(ctx.getSignal(\"t4\", [ctx.getVar(\"i\",[])])).mul(bigInt(ctx.getVar(\"t\",[]))).mod(__P__))).mod(__P__));\n            ctx.setSignal(\"xR\", [ctx.getVar(\"i\",[])], bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0)) ? (ctx.getSignal(\"xL_in\", [])) : (ctx.getSignal(\"xL\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)])));\n        }\n\n        } else {\n        {\n            ctx.setSignal(\"xR_out\", [], bigInt(ctx.getSignal(\"xR\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)])).add(bigInt(bigInt(ctx.getSignal(\"t4\", [ctx.getVar(\"i\",[])])).mul(bigInt(ctx.getVar(\"t\",[]))).mod(__P__))).mod(__P__));\n            ctx.setSignal(\"xL_out\", [], ctx.getSignal(\"xL\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)]));\n        }\n\n        }\n    }\n\n     }\n}\n",
  "Bits2Point": "function(ctx) {\n}\n",
  "Bits2Point_Strict": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"aliasCheckY\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.assert(ctx.getSignal(\"in\", [\"254\"]), \"0\", \"undefined:88:4\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"b2nY\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"b2nY\", [], \"out\", []));\n    ctx.setVar(\"a\", [], \"168700\");\n    ctx.setVar(\"d\", [], \"168696\");\n    ctx.setVar(\"y2\", [], bigInt(ctx.getSignal(\"out\", [\"1\"])).mul(bigInt(ctx.getSignal(\"out\", [\"1\"]))).mod(__P__));\n    ctx.setVar(\"x\", [], ctx.callFunction(\"sqrt\", [bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getVar(\"y2\",[]))).mod(__P__)).mul( bigInt(bigInt(ctx.getVar(\"a\",[])).add(__P__).sub(bigInt(bigInt(ctx.getVar(\"d\",[])).mul(bigInt(ctx.getVar(\"y2\",[]))).mod(__P__))).mod(__P__)).inverse(__P__) ).mod(__P__)]));\n    if (bigInt((bigInt(ctx.getSignal(\"in\", [\"255\"])).eq(bigInt(\"1\")) ? 1 : 0)).neq(bigInt(0))) {\n    ctx.setVar(\"x\", [], __P__.sub(bigInt(ctx.getVar(\"x\",[]))).mod(__P__))\n    }\n    ctx.setSignal(\"out\", [\"0\"], ctx.getVar(\"x\",[]));\n    ctx.setPin(\"babyCheck\", [], \"x\", [], ctx.getSignal(\"out\", [\"0\"]));\n    ctx.setPin(\"babyCheck\", [], \"y\", [], ctx.getSignal(\"out\", [\"1\"]));\n    ctx.setPin(\"n2bX\", [], \"in\", [], ctx.getSignal(\"out\", [\"0\"]));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"aliasCheckX\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2bX\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"signCalc\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2bX\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.assert(ctx.getPin(\"signCalc\", [], \"out\", []), ctx.getSignal(\"in\", [\"255\"]), \"undefined:124:4\");\n}\n",
  "Point2Bits": "function(ctx) {\n}\n",
  "Point2Bits_Strict": "function(ctx) {\n    ctx.setPin(\"n2bX\", [], \"in\", [], ctx.getSignal(\"in\", [\"0\"]));\n    ctx.setPin(\"n2bY\", [], \"in\", [], ctx.getSignal(\"in\", [\"1\"]));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"aliasCheckX\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2bX\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"aliasCheckY\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2bY\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"signCalc\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2bX\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], ctx.getPin(\"n2bY\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setSignal(\"out\", [\"254\"], \"0\");\n    ctx.setSignal(\"out\", [\"255\"], ctx.getPin(\"signCalc\", [], \"out\", []));\n}\n",
  "Multiplexor2": "function(ctx) {\n    ctx.setSignal(\"out\", [\"0\"], bigInt(bigInt(bigInt(ctx.getSignal(\"in\", [\"1\",\"0\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\",\"0\"]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"sel\", []))).mod(__P__)).add(bigInt(ctx.getSignal(\"in\", [\"0\",\"0\"]))).mod(__P__));\n    ctx.setSignal(\"out\", [\"1\"], bigInt(bigInt(bigInt(ctx.getSignal(\"in\", [\"1\",\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\",\"1\"]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"sel\", []))).mod(__P__)).add(bigInt(ctx.getSignal(\"in\", [\"0\",\"1\"]))).mod(__P__));\n}\n",
  "BitElementMulAny": "function(ctx) {\n    ctx.setPin(\"selector\", [], \"sel\", [], ctx.getSignal(\"sel\", []));\n    ctx.setPin(\"doubler\", [], \"in\", [\"0\"], ctx.getSignal(\"dblIn\", [\"0\"]));\n    ctx.setPin(\"doubler\", [], \"in\", [\"1\"], ctx.getSignal(\"dblIn\", [\"1\"]));\n    ctx.setPin(\"adder\", [], \"in1\", [\"0\"], ctx.getPin(\"doubler\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"adder\", [], \"in1\", [\"1\"], ctx.getPin(\"doubler\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"adder\", [], \"in2\", [\"0\"], ctx.getSignal(\"addIn\", [\"0\"]));\n    ctx.setPin(\"adder\", [], \"in2\", [\"1\"], ctx.getSignal(\"addIn\", [\"1\"]));\n    ctx.setPin(\"selector\", [], \"in\", [\"0\",\"0\"], ctx.getSignal(\"addIn\", [\"0\"]));\n    ctx.setPin(\"selector\", [], \"in\", [\"0\",\"1\"], ctx.getSignal(\"addIn\", [\"1\"]));\n    ctx.setPin(\"selector\", [], \"in\", [\"1\",\"0\"], ctx.getPin(\"adder\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"selector\", [], \"in\", [\"1\",\"1\"], ctx.getPin(\"adder\", [], \"out\", [\"1\"]));\n    ctx.setSignal(\"dblOut\", [\"0\"], ctx.getPin(\"doubler\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"dblOut\", [\"1\"], ctx.getPin(\"doubler\", [], \"out\", [\"1\"]));\n    ctx.setSignal(\"addOut\", [\"0\"], ctx.getPin(\"selector\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"addOut\", [\"1\"], ctx.getPin(\"selector\", [], \"out\", [\"1\"]));\n}\n",
  "SegmentMulAny": "function(ctx) {\n    ctx.setPin(\"e2m\", [], \"in\", [\"0\"], ctx.getSignal(\"p\", [\"0\"]));\n    ctx.setPin(\"e2m\", [], \"in\", [\"1\"], ctx.getSignal(\"p\", [\"1\"]));\n    ctx.setPin(\"bits\", [\"0\"], \"dblIn\", [\"0\"], ctx.getPin(\"e2m\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"bits\", [\"0\"], \"dblIn\", [\"1\"], ctx.getPin(\"e2m\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"bits\", [\"0\"], \"addIn\", [\"0\"], ctx.getPin(\"e2m\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"bits\", [\"0\"], \"addIn\", [\"1\"], ctx.getPin(\"e2m\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"bits\", [\"0\"], \"sel\", [], ctx.getSignal(\"e\", [\"1\"]));\n    for (ctx.setVar(\"i\", [], \"1\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"bits\", [ctx.getVar(\"i\",[])], \"dblIn\", [\"0\"], ctx.getPin(\"bits\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"dblOut\", [\"0\"]));\n        ctx.setPin(\"bits\", [ctx.getVar(\"i\",[])], \"dblIn\", [\"1\"], ctx.getPin(\"bits\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"dblOut\", [\"1\"]));\n        ctx.setPin(\"bits\", [ctx.getVar(\"i\",[])], \"addIn\", [\"0\"], ctx.getPin(\"bits\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"addOut\", [\"0\"]));\n        ctx.setPin(\"bits\", [ctx.getVar(\"i\",[])], \"addIn\", [\"1\"], ctx.getPin(\"bits\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"addOut\", [\"1\"]));\n        ctx.setPin(\"bits\", [ctx.getVar(\"i\",[])], \"sel\", [], ctx.getSignal(\"e\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__)]));\n    }\n\n     }\n    ctx.setSignal(\"dbl\", [\"0\"], ctx.getPin(\"bits\", [bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"dblOut\", [\"0\"]));\n    ctx.setSignal(\"dbl\", [\"1\"], ctx.getPin(\"bits\", [bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"dblOut\", [\"1\"]));\n    ctx.setPin(\"m2e\", [], \"in\", [\"0\"], ctx.getPin(\"bits\", [bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"addOut\", [\"0\"]));\n    ctx.setPin(\"m2e\", [], \"in\", [\"1\"], ctx.getPin(\"bits\", [bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"addOut\", [\"1\"]));\n    ctx.setPin(\"eadder\", [], \"x1\", [], ctx.getPin(\"m2e\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"eadder\", [], \"y1\", [], ctx.getPin(\"m2e\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"eadder\", [], \"x2\", [], __P__.sub(bigInt(ctx.getSignal(\"p\", [\"0\"]))).mod(__P__));\n    ctx.setPin(\"eadder\", [], \"y2\", [], ctx.getSignal(\"p\", [\"1\"]));\n    ctx.setPin(\"lastSel\", [], \"sel\", [], ctx.getSignal(\"e\", [\"0\"]));\n    ctx.setPin(\"lastSel\", [], \"in\", [\"0\",\"0\"], ctx.getPin(\"eadder\", [], \"xout\", []));\n    ctx.setPin(\"lastSel\", [], \"in\", [\"0\",\"1\"], ctx.getPin(\"eadder\", [], \"yout\", []));\n    ctx.setPin(\"lastSel\", [], \"in\", [\"1\",\"0\"], ctx.getPin(\"m2e\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"lastSel\", [], \"in\", [\"1\",\"1\"], ctx.getPin(\"m2e\", [], \"out\", [\"1\"]));\n    ctx.setSignal(\"out\", [\"0\"], ctx.getPin(\"lastSel\", [], \"out\", [\"0\"]));\n    ctx.setSignal(\"out\", [\"1\"], ctx.getPin(\"lastSel\", [], \"out\", [\"1\"]));\n}\n",
  "EscalarMulAny": "function(ctx) {\n    ctx.setVar(\"nsegments\", [], bigInt(bigInt(bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).div( bigInt(\"148\"))).add(bigInt(\"1\")).mod(__P__));\n    ctx.setVar(\"nlastsegment\", [], bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(bigInt(bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).mul(bigInt(\"148\")).mod(__P__))).mod(__P__));\n    ctx.setPin(\"zeropoint\", [], \"in\", [], ctx.getSignal(\"p\", [\"0\"]));\n    for (ctx.setVar(\"s\", [], \"0\");bigInt(bigInt(ctx.getVar(\"s\",[])).lt(bigInt(ctx.getVar(\"nsegments\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"s\", [], bigInt(ctx.getVar(\"s\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"nseg\", [], bigInt(bigInt(ctx.getVar(\"s\",[])).lt(bigInt(bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0)) ? (\"148\") : (ctx.getVar(\"nlastsegment\",[])));\n        for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"nseg\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"e\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"e\", [bigInt(bigInt(ctx.getVar(\"s\",[])).mul(bigInt(\"148\")).mod(__P__)).add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)]));\n        }\n\n         }\n        if (bigInt((bigInt(ctx.getVar(\"s\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"p\", [\"0\"], bigInt(ctx.getSignal(\"p\", [\"0\"])).add(bigInt(bigInt(bigInt(\"5299619240641551281634865583518297030282874472190772894086521144482721001553\").add(__P__).sub(bigInt(ctx.getSignal(\"p\", [\"0\"]))).mod(__P__)).mul(bigInt(ctx.getPin(\"zeropoint\", [], \"out\", []))).mod(__P__))).mod(__P__));\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"p\", [\"1\"], bigInt(ctx.getSignal(\"p\", [\"1\"])).add(bigInt(bigInt(bigInt(\"16950150798460657717958625567821834550301663161624707787222815936182638968203\").add(__P__).sub(bigInt(ctx.getSignal(\"p\", [\"1\"]))).mod(__P__)).mul(bigInt(ctx.getPin(\"zeropoint\", [], \"out\", []))).mod(__P__))).mod(__P__));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"doublers\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"0\"], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"dbl\", [\"0\"]));\n            ctx.setPin(\"doublers\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"1\"], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"dbl\", [\"1\"]));\n            ctx.setPin(\"m2e\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"0\"], ctx.getPin(\"doublers\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n            ctx.setPin(\"m2e\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"in\", [\"1\"], ctx.getPin(\"doublers\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"p\", [\"0\"], ctx.getPin(\"m2e\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n            ctx.setPin(\"segments\", [ctx.getVar(\"s\",[])], \"p\", [\"1\"], ctx.getPin(\"m2e\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n            if (bigInt((bigInt(ctx.getVar(\"s\",[])).eq(bigInt(\"1\")) ? 1 : 0)).neq(bigInt(0))) {\n            {\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"x1\", [], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"0\"]));\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"y1\", [], ctx.getPin(\"segments\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out\", [\"1\"]));\n            }\n\n            } else {\n            {\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"x1\", [], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"xout\", []));\n                ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"y1\", [], ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"yout\", []));\n            }\n\n            }\n            ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"x2\", [], ctx.getPin(\"segments\", [ctx.getVar(\"s\",[])], \"out\", [\"0\"]));\n            ctx.setPin(\"adders\", [bigInt(ctx.getVar(\"s\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"y2\", [], ctx.getPin(\"segments\", [ctx.getVar(\"s\",[])], \"out\", [\"1\"]));\n        }\n\n        }\n    }\n\n     }\n    if (bigInt((bigInt(ctx.getVar(\"nsegments\",[])).eq(bigInt(\"1\")) ? 1 : 0)).neq(bigInt(0))) {\n    {\n        ctx.setSignal(\"out\", [\"0\"], bigInt(ctx.getPin(\"segments\", [\"0\"], \"out\", [\"0\"])).mul(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"zeropoint\", [], \"out\", []))).mod(__P__))).mod(__P__));\n        ctx.setSignal(\"out\", [\"1\"], bigInt(ctx.getPin(\"segments\", [\"0\"], \"out\", [\"1\"])).add(bigInt(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"segments\", [\"0\"], \"out\", [\"1\"]))).mod(__P__)).mul(bigInt(ctx.getPin(\"zeropoint\", [], \"out\", []))).mod(__P__))).mod(__P__));\n    }\n\n    } else {\n    {\n        ctx.setSignal(\"out\", [\"0\"], bigInt(ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"xout\", [])).mul(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"zeropoint\", [], \"out\", []))).mod(__P__))).mod(__P__));\n        ctx.setSignal(\"out\", [\"1\"], bigInt(ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"yout\", [])).add(bigInt(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"adders\", [bigInt(ctx.getVar(\"nsegments\",[])).add(__P__).sub(bigInt(\"2\")).mod(__P__)], \"yout\", []))).mod(__P__)).mul(bigInt(ctx.getPin(\"zeropoint\", [], \"out\", []))).mod(__P__))).mod(__P__));\n    }\n\n    }\n}\n",
  "EdDSAMiMCSpongeVerifier": "function(ctx) {\n    ctx.setPin(\"snum2bits\", [], \"in\", [], ctx.getSignal(\"S\", []));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"253\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"compConstant\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"snum2bits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setPin(\"compConstant\", [], \"in\", [\"253\"], \"0\");\n    ctx.assert(ctx.getPin(\"compConstant\", [], \"out\", []), \"0\", \"undefined:51:4\");\n    ctx.setPin(\"hash\", [], \"ins\", [\"0\"], ctx.getSignal(\"R8x\", []));\n    ctx.setPin(\"hash\", [], \"ins\", [\"1\"], ctx.getSignal(\"R8y\", []));\n    ctx.setPin(\"hash\", [], \"ins\", [\"2\"], ctx.getSignal(\"Ax\", []));\n    ctx.setPin(\"hash\", [], \"ins\", [\"3\"], ctx.getSignal(\"Ay\", []));\n    ctx.setPin(\"hash\", [], \"ins\", [\"4\"], ctx.getSignal(\"M\", []));\n    ctx.setPin(\"hash\", [], \"k\", [], \"0\");\n    ctx.setPin(\"h2bits\", [], \"in\", [], ctx.getPin(\"hash\", [], \"outs\", [\"0\"]));\n    ctx.setPin(\"dbl1\", [], \"x\", [], ctx.getSignal(\"Ax\", []));\n    ctx.setPin(\"dbl1\", [], \"y\", [], ctx.getSignal(\"Ay\", []));\n    ctx.setPin(\"dbl2\", [], \"x\", [], ctx.getPin(\"dbl1\", [], \"xout\", []));\n    ctx.setPin(\"dbl2\", [], \"y\", [], ctx.getPin(\"dbl1\", [], \"yout\", []));\n    ctx.setPin(\"dbl3\", [], \"x\", [], ctx.getPin(\"dbl2\", [], \"xout\", []));\n    ctx.setPin(\"dbl3\", [], \"y\", [], ctx.getPin(\"dbl2\", [], \"yout\", []));\n    ctx.setPin(\"isZero\", [], \"in\", [], ctx.getPin(\"dbl3\", [], \"x\", []));\n    ctx.assert(ctx.getPin(\"isZero\", [], \"out\", []), \"0\", \"undefined:83:4\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"mulAny\", [], \"e\", [ctx.getVar(\"i\",[])], ctx.getPin(\"h2bits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setPin(\"mulAny\", [], \"p\", [\"0\"], ctx.getPin(\"dbl3\", [], \"xout\", []));\n    ctx.setPin(\"mulAny\", [], \"p\", [\"1\"], ctx.getPin(\"dbl3\", [], \"yout\", []));\n    ctx.setPin(\"addRight\", [], \"x1\", [], ctx.getSignal(\"R8x\", []));\n    ctx.setPin(\"addRight\", [], \"y1\", [], ctx.getSignal(\"R8y\", []));\n    ctx.setPin(\"addRight\", [], \"x2\", [], ctx.getPin(\"mulAny\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"addRight\", [], \"y2\", [], ctx.getPin(\"mulAny\", [], \"out\", [\"1\"]));\n    ctx.setVar(\"BASE8\", [], [\"5299619240641551281634865583518297030282874472190772894086521144482721001553\",\"16950150798460657717958625567821834550301663161624707787222815936182638968203\"]);\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"253\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"mulFix\", [], \"e\", [ctx.getVar(\"i\",[])], ctx.getPin(\"snum2bits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setPin(\"eqCheckX\", [], \"enabled\", [], ctx.getSignal(\"enabled\", []));\n    ctx.setPin(\"eqCheckX\", [], \"in\", [\"0\"], ctx.getPin(\"mulFix\", [], \"out\", [\"0\"]));\n    ctx.setPin(\"eqCheckX\", [], \"in\", [\"1\"], ctx.getPin(\"addRight\", [], \"xout\", []));\n    ctx.setPin(\"eqCheckY\", [], \"enabled\", [], ctx.getSignal(\"enabled\", []));\n    ctx.setPin(\"eqCheckY\", [], \"in\", [\"0\"], ctx.getPin(\"mulFix\", [], \"out\", [\"1\"]));\n    ctx.setPin(\"eqCheckY\", [], \"in\", [\"1\"], ctx.getPin(\"addRight\", [], \"yout\", []));\n}\n",
  "Uint32Add": "function(ctx) {\n    ctx.setVar(\"result_num_bits\", [], bigInt(bigInt(\"32\").add(bigInt(ctx.getVar(\"n\",[]))).mod(__P__)).add(__P__).sub(bigInt(\"1\")).mod(__P__));\n    ctx.setVar(\"lc\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"num_lc\", [], \"0\");\n        ctx.setVar(\"coeff\", [], \"1\");\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setVar(\"lc\", [], bigInt(ctx.getVar(\"lc\",[])).add(bigInt(bigInt(ctx.getSignal(\"nums_bits\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])])).mul(bigInt(ctx.getVar(\"coeff\",[]))).mod(__P__))).mod(__P__));\n            ctx.setVar(\"num_lc\", [], bigInt(ctx.getVar(\"num_lc\",[])).add(bigInt(bigInt(ctx.getSignal(\"nums_bits\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])])).mul(bigInt(ctx.getVar(\"coeff\",[]))).mod(__P__))).mod(__P__));\n            ctx.setVar(\"coeff\", [], bigInt(ctx.getVar(\"coeff\",[])).mul(bigInt(\"2\")).mod(__P__));\n        }\n\n         }\n        ctx.setSignal(\"nums_vals\", [ctx.getVar(\"i\",[])], ctx.getVar(\"num_lc\",[]));\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            ctx.setSignal(\"result_val\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"nums_vals\", [ctx.getVar(\"i\",[])]));\n        }\n\n        } else {\n        {\n            ctx.setSignal(\"result_val\", [ctx.getVar(\"i\",[])], bigInt(ctx.getSignal(\"result_val\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)])).add(bigInt(ctx.getSignal(\"nums_vals\", [ctx.getVar(\"i\",[])]))).mod(__P__));\n        }\n\n        }\n    }\n\n     }\n    ctx.setVar(\"result_lc\", [], \"0\");\n    ctx.setVar(\"coeff\", [], \"1\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"result_num_bits\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"result_bits\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getVar(\"i\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getSignal(\"result_val\", [bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)])).shr(bigInt(ctx.getVar(\"i\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"result_bits\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"result_bits\", [ctx.getVar(\"i\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\", \"undefined:41:4\");\n        ctx.setVar(\"result_lc\", [], bigInt(ctx.getVar(\"result_lc\",[])).add(bigInt(bigInt(ctx.getSignal(\"result_bits\", [ctx.getVar(\"i\",[])])).mul(bigInt(ctx.getVar(\"coeff\",[]))).mod(__P__))).mod(__P__));\n        ctx.setVar(\"coeff\", [], bigInt(ctx.getVar(\"coeff\",[])).mul(bigInt(\"2\")).mod(__P__));\n    }\n\n     }\n    ctx.assert(ctx.getVar(\"result_lc\",[]), ctx.getVar(\"lc\",[]), \"undefined:47:2\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out_bits\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"result_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n}\n",
  "Uint32Xor": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out_bits\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getSignal(\"a_bits\", [ctx.getVar(\"i\",[])])).add(bigInt(ctx.getSignal(\"b_bits\", [ctx.getVar(\"i\",[])]))).mod(__P__)).add(__P__).sub(bigInt(bigInt(bigInt(\"2\").mul(bigInt(ctx.getSignal(\"a_bits\", [ctx.getVar(\"i\",[])]))).mod(__P__)).mul(bigInt(ctx.getSignal(\"b_bits\", [ctx.getVar(\"i\",[])]))).mod(__P__))).mod(__P__));\n    }\n\n     }\n}\n",
  "RotR": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in\", [bigInt(bigInt(ctx.getVar(\"i\",[])).add(bigInt(ctx.getVar(\"r\",[]))).mod(__P__)).mod(bigInt(ctx.getVar(\"n\",[])))]));\n    }\n\n     }\n}\n",
  "MixingG": "function(ctx) {\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_a_add\", [], \"nums_bits\", [\"0\",ctx.getVar(\"i\",[])], ctx.getSignal(\"in_v\", [ctx.getVar(\"a\",[]),ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_a_add\", [], \"nums_bits\", [\"1\",ctx.getVar(\"i\",[])], ctx.getSignal(\"in_v\", [ctx.getVar(\"b\",[]),ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_a_add\", [], \"nums_bits\", [\"2\",ctx.getVar(\"i\",[])], ctx.getSignal(\"x\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_d_a_xor\", [], \"a_bits\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in_v\", [ctx.getVar(\"d\",[]),ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_d_a_xor\", [], \"b_bits\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_a_add\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_d_a_rot\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_d_a_xor\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_c_add\", [], \"nums_bits\", [\"0\",ctx.getVar(\"i\",[])], ctx.getSignal(\"in_v\", [ctx.getVar(\"c\",[]),ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_c_add\", [], \"nums_bits\", [\"1\",ctx.getVar(\"i\",[])], ctx.getPin(\"v_d_a_rot\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_b_c_xor\", [], \"a_bits\", [ctx.getVar(\"i\",[])], ctx.getSignal(\"in_v\", [ctx.getVar(\"b\",[]),ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_b_c_xor\", [], \"b_bits\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_c_add\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_b_c_rot\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_b_c_xor\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_a_add_2\", [], \"nums_bits\", [\"0\",ctx.getVar(\"i\",[])], ctx.getPin(\"v_a_add\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_a_add_2\", [], \"nums_bits\", [\"1\",ctx.getVar(\"i\",[])], ctx.getPin(\"v_b_c_rot\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_a_add_2\", [], \"nums_bits\", [\"2\",ctx.getVar(\"i\",[])], ctx.getSignal(\"y\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_d_a_xor_2\", [], \"a_bits\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_d_a_rot\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_d_a_xor_2\", [], \"b_bits\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_a_add_2\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_d_a_rot_2\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_d_a_xor_2\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_c_add_2\", [], \"nums_bits\", [\"0\",ctx.getVar(\"i\",[])], ctx.getPin(\"v_c_add\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_c_add_2\", [], \"nums_bits\", [\"1\",ctx.getVar(\"i\",[])], ctx.getPin(\"v_d_a_rot_2\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_b_c_xor_2\", [], \"a_bits\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_b_c_rot\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"v_b_c_xor_2\", [], \"b_bits\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_c_add_2\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"v_b_c_rot_2\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"v_b_c_xor_2\", [], \"out_bits\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(ctx.getVar(\"a\",[]))) ? 1 : 0)).neq(bigInt(0))) {\n            {\n                ctx.setSignal(\"out_v\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"v_a_add_2\", [], \"out_bits\", [ctx.getVar(\"j\",[])]));\n            }\n\n            } else {\n            if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(ctx.getVar(\"b\",[]))) ? 1 : 0)).neq(bigInt(0))) {\n            {\n                ctx.setSignal(\"out_v\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"v_b_c_rot_2\", [], \"out\", [ctx.getVar(\"j\",[])]));\n            }\n\n            } else {\n            if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(ctx.getVar(\"c\",[]))) ? 1 : 0)).neq(bigInt(0))) {\n            {\n                ctx.setSignal(\"out_v\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"v_c_add_2\", [], \"out_bits\", [ctx.getVar(\"j\",[])]));\n            }\n\n            } else {\n            if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(ctx.getVar(\"d\",[]))) ? 1 : 0)).neq(bigInt(0))) {\n            {\n                ctx.setSignal(\"out_v\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"v_d_a_rot_2\", [], \"out\", [ctx.getVar(\"j\",[])]));\n            }\n\n            } else {\n            {\n                ctx.setSignal(\"out_v\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getSignal(\"in_v\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n            }\n\n            }\n\n            }\n\n            }\n\n            }\n        }\n\n         }\n    }\n\n     }\n}\n",
  "Blake2sCompression": "function(ctx) {\n    ctx.setVar(\"v_consts\", [], [\"1779033703\",\"3144134277\",\"1013904242\",\"2773480762\",\"1359893119\",\"2600822924\",\"528734635\",\"1541459225\"]);\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        if (bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"8\")) ? 1 : 0).neq(bigInt(0))) {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setSignal(\"v_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getSignal(\"in_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n            }\n\n             }\n        }\n\n        } else {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setSignal(\"v_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], bigInt(bigInt(ctx.getVar(\"j\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"v_consts\",[bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"8\")).mod(__P__)])).shr(bigInt(ctx.getVar(\"j\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n            }\n\n             }\n        }\n\n        }\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"12\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"v_12_xor\", [], \"a_bits\", [ctx.getVar(\"j\",[])], ctx.getSignal(\"v_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n                ctx.setPin(\"v_12_xor\", [], \"b_bits\", [ctx.getVar(\"j\",[])], bigInt(bigInt(ctx.getVar(\"j\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"t\",[])).shr(bigInt(ctx.getVar(\"j\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n            }\n\n             }\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setSignal(\"v_pass_1\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"v_12_xor\", [], \"out_bits\", [ctx.getVar(\"j\",[])]));\n            }\n\n             }\n        }\n\n        } else {\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"13\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"v_13_xor\", [], \"a_bits\", [ctx.getVar(\"j\",[])], ctx.getSignal(\"v_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n                ctx.setPin(\"v_13_xor\", [], \"b_bits\", [ctx.getVar(\"j\",[])], bigInt(bigInt(bigInt(\"32\").add(bigInt(ctx.getVar(\"j\",[]))).mod(__P__)).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"t\",[])).shr(bigInt(bigInt(\"32\").add(bigInt(ctx.getVar(\"j\",[]))).mod(__P__))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n            }\n\n             }\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setSignal(\"v_pass_1\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"v_13_xor\", [], \"out_bits\", [ctx.getVar(\"j\",[])]));\n            }\n\n             }\n        }\n\n        } else {\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"14\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            if (bigInt((bigInt(ctx.getVar(\"f\",[])).eq(bigInt(\"1\")) ? 1 : 0)).neq(bigInt(0))) {\n            {\n                for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n                {\n                    ctx.setPin(\"v_14_xor\", [], \"a_bits\", [ctx.getVar(\"j\",[])], ctx.getSignal(\"v_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n                    ctx.setPin(\"v_14_xor\", [], \"b_bits\", [ctx.getVar(\"j\",[])], \"1\");\n                }\n\n                 }\n                for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n                {\n                    ctx.setSignal(\"v_pass_1\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"v_14_xor\", [], \"out_bits\", [ctx.getVar(\"j\",[])]));\n                }\n\n                 }\n            }\n\n            } else {\n            {\n                for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n                {\n                    ctx.setPin(\"v_14_xor\", [], \"a_bits\", [ctx.getVar(\"j\",[])], ctx.getSignal(\"v_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n                    ctx.setPin(\"v_14_xor\", [], \"b_bits\", [ctx.getVar(\"j\",[])], \"0\");\n                }\n\n                 }\n                for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n                {\n                    ctx.setSignal(\"v_pass_1\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getSignal(\"v_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n                }\n\n                 }\n            }\n\n            }\n        }\n\n        } else {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setSignal(\"v_pass_1\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getSignal(\"v_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n            }\n\n             }\n        }\n\n        }\n\n        }\n\n        }\n    }\n\n     }\n    ctx.setVar(\"sigma\", [], [[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"],[\"14\",\"10\",\"4\",\"8\",\"9\",\"15\",\"13\",\"6\",\"1\",\"12\",\"0\",\"2\",\"11\",\"7\",\"5\",\"3\"],[\"11\",\"8\",\"12\",\"0\",\"5\",\"2\",\"15\",\"13\",\"10\",\"14\",\"3\",\"6\",\"7\",\"1\",\"9\",\"4\"],[\"7\",\"9\",\"3\",\"1\",\"13\",\"12\",\"11\",\"14\",\"2\",\"6\",\"5\",\"10\",\"4\",\"0\",\"15\",\"8\"],[\"9\",\"0\",\"5\",\"7\",\"2\",\"4\",\"10\",\"15\",\"14\",\"1\",\"11\",\"12\",\"6\",\"8\",\"3\",\"13\"],[\"2\",\"12\",\"6\",\"10\",\"0\",\"11\",\"8\",\"3\",\"4\",\"13\",\"7\",\"5\",\"15\",\"14\",\"1\",\"9\"],[\"12\",\"5\",\"1\",\"15\",\"14\",\"13\",\"4\",\"10\",\"0\",\"7\",\"6\",\"3\",\"9\",\"2\",\"8\",\"11\"],[\"13\",\"11\",\"7\",\"14\",\"12\",\"1\",\"3\",\"9\",\"5\",\"0\",\"15\",\"4\",\"8\",\"6\",\"2\",\"10\"],[\"6\",\"15\",\"14\",\"9\",\"11\",\"3\",\"0\",\"8\",\"12\",\"2\",\"13\",\"7\",\"1\",\"4\",\"10\",\"5\"],[\"10\",\"2\",\"8\",\"4\",\"7\",\"6\",\"1\",\"5\",\"15\",\"11\",\"9\",\"14\",\"3\",\"12\",\"13\",\"0\"]]);\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"10\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"s\", [], ctx.getVar(\"sigma\",[ctx.getVar(\"i\",[])]));\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n                {\n                    ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"0\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getSignal(\"v_pass_1\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n                }\n\n                } else {\n                {\n                    ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"0\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getPin(\"mixing_g\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__),\"7\"], \"out_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n                }\n\n                }\n            }\n\n             }\n        }\n\n         }\n        for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"0\"], \"x\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"0\"]),ctx.getVar(\"k\",[])]));\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"0\"], \"y\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"1\"]),ctx.getVar(\"k\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"1\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"0\"], \"out_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n            }\n\n             }\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"1\"], \"x\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"2\"]),ctx.getVar(\"k\",[])]));\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"1\"], \"y\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"3\"]),ctx.getVar(\"k\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"2\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"1\"], \"out_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n            }\n\n             }\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"2\"], \"x\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"4\"]),ctx.getVar(\"k\",[])]));\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"2\"], \"y\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"5\"]),ctx.getVar(\"k\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"3\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"2\"], \"out_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n            }\n\n             }\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"3\"], \"x\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"6\"]),ctx.getVar(\"k\",[])]));\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"3\"], \"y\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"7\"]),ctx.getVar(\"k\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"4\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"3\"], \"out_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n            }\n\n             }\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"4\"], \"x\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"8\"]),ctx.getVar(\"k\",[])]));\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"4\"], \"y\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"9\"]),ctx.getVar(\"k\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"5\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"4\"], \"out_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n            }\n\n             }\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"5\"], \"x\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"10\"]),ctx.getVar(\"k\",[])]));\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"5\"], \"y\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"11\"]),ctx.getVar(\"k\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"6\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"5\"], \"out_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n            }\n\n             }\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"6\"], \"x\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"12\"]),ctx.getVar(\"k\",[])]));\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"6\"], \"y\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"13\"]),ctx.getVar(\"k\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"7\"], \"in_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])], ctx.getPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"6\"], \"out_v\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])]));\n            }\n\n             }\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"7\"], \"x\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"14\"]),ctx.getVar(\"k\",[])]));\n            ctx.setPin(\"mixing_g\", [ctx.getVar(\"i\",[]),\"7\"], \"y\", [ctx.getVar(\"k\",[])], ctx.getSignal(\"in_m\", [ctx.getVar(\"s\",[\"15\"]),ctx.getVar(\"k\",[])]));\n        }\n\n         }\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"8\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"h_xor_1\", [ctx.getVar(\"i\",[])], \"a_bits\", [ctx.getVar(\"j\",[])], ctx.getSignal(\"in_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n            ctx.setPin(\"h_xor_1\", [ctx.getVar(\"i\",[])], \"b_bits\", [ctx.getVar(\"j\",[])], ctx.getPin(\"mixing_g\", [\"9\",\"7\"], \"out_v\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setPin(\"h_xor_2\", [ctx.getVar(\"i\",[])], \"a_bits\", [ctx.getVar(\"j\",[])], ctx.getPin(\"h_xor_1\", [ctx.getVar(\"i\",[])], \"out_bits\", [ctx.getVar(\"j\",[])]));\n            ctx.setPin(\"h_xor_2\", [ctx.getVar(\"i\",[])], \"b_bits\", [ctx.getVar(\"j\",[])], ctx.getPin(\"mixing_g\", [\"9\",\"7\"], \"out_v\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"8\")).mod(__P__),ctx.getVar(\"j\",[])]));\n        }\n\n         }\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setSignal(\"out_h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"h_xor_2\", [ctx.getVar(\"i\",[])], \"out_bits\", [ctx.getVar(\"j\",[])]));\n        }\n\n         }\n    }\n\n     }\n}\n",
  "Blake2s": "function(ctx) {\n    ctx.setVar(\"h_consts\", [], [\"1795745351\",\"3144134277\",\"1013904242\",\"2773480762\",\"1359893119\",\"2600822924\",\"528734635\",\"1541459225\"]);\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"8\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"h_from_bits\", [ctx.getVar(\"i\",[])], \"in\", [], ctx.getVar(\"h_consts\",[ctx.getVar(\"i\",[])]));\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"6\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"h6_xor\", [], \"a_bits\", [ctx.getVar(\"j\",[])], ctx.getPin(\"h_from_bits\", [ctx.getVar(\"i\",[])], \"out\", [ctx.getVar(\"j\",[])]));\n                ctx.setPin(\"h6_xor\", [], \"b_bits\", [ctx.getVar(\"j\",[])], bigInt(bigInt(ctx.getVar(\"j\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"personalization\",[])).shr(bigInt(ctx.getVar(\"j\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n            }\n\n             }\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setSignal(\"h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"h6_xor\", [], \"out_bits\", [ctx.getVar(\"j\",[])]));\n            }\n\n             }\n        }\n\n        } else {\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"7\")) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setPin(\"h7_xor\", [], \"a_bits\", [ctx.getVar(\"j\",[])], ctx.getPin(\"h_from_bits\", [ctx.getVar(\"i\",[])], \"out\", [ctx.getVar(\"j\",[])]));\n                ctx.setPin(\"h7_xor\", [], \"b_bits\", [ctx.getVar(\"j\",[])], bigInt(bigInt(bigInt(\"32\").add(bigInt(ctx.getVar(\"j\",[]))).mod(__P__)).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"personalization\",[])).shr(bigInt(bigInt(\"32\").add(bigInt(ctx.getVar(\"j\",[]))).mod(__P__))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n            }\n\n             }\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setSignal(\"h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"h7_xor\", [], \"out_bits\", [ctx.getVar(\"j\",[])]));\n            }\n\n             }\n        }\n\n        } else {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setSignal(\"h\", [ctx.getVar(\"i\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"h_from_bits\", [ctx.getVar(\"i\",[])], \"out\", [ctx.getVar(\"j\",[])]));\n            }\n\n             }\n        }\n\n        }\n\n        }\n    }\n\n     }\n    if (bigInt((bigInt(bigInt(ctx.getVar(\"n_bits\",[])).mod(bigInt(\"512\"))).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n    {\n        ctx.setVar(\"n_rounded\", [], ctx.getVar(\"n_bits\",[]));\n    }\n\n    } else {\n    {\n        ctx.setVar(\"n_rounded\", [], bigInt(ctx.getVar(\"n_bits\",[])).add(bigInt(bigInt(\"512\").add(__P__).sub(bigInt(bigInt(ctx.getVar(\"n_bits\",[])).mod(bigInt(\"512\")))).mod(__P__))).mod(__P__));\n    }\n\n    }\n    ctx.setVar(\"num_blocks\", [], bigInt(ctx.getVar(\"n_rounded\",[])).mul( bigInt(\"512\").inverse(__P__) ).mod(__P__));\n    if (bigInt((bigInt(ctx.getVar(\"num_blocks\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n    {\n        ctx.setVar(\"num_blocks\", [], \"1\");\n    }\n\n    }\n    ctx.setVar(\"current_bit\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"num_blocks\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        if (bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(bigInt(ctx.getVar(\"num_blocks\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0))) {\n        {\n        }\n\n        } else {\n        {\n        }\n\n        }\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"32\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"8\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n                {\n                    ctx.setPin(\"compressions\", [ctx.getVar(\"i\",[])], \"in_h\", [ctx.getVar(\"k\",[]),ctx.getVar(\"j\",[])], ctx.getSignal(\"h\", [ctx.getVar(\"k\",[]),ctx.getVar(\"j\",[])]));\n                }\n\n                } else {\n                {\n                    ctx.setPin(\"compressions\", [ctx.getVar(\"i\",[])], \"in_h\", [ctx.getVar(\"k\",[]),ctx.getVar(\"j\",[])], ctx.getPin(\"compressions\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out_h\", [ctx.getVar(\"k\",[]),ctx.getVar(\"j\",[])]));\n                }\n\n                }\n            }\n\n             }\n            for (ctx.setVar(\"l\", [], \"0\");bigInt(bigInt(ctx.getVar(\"l\",[])).lt(bigInt(\"16\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"l\", [], bigInt(ctx.getVar(\"l\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                ctx.setVar(\"current_bit\", [], bigInt(bigInt(bigInt(\"512\").mul(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)).add(bigInt(bigInt(\"32\").mul(bigInt(ctx.getVar(\"l\",[]))).mod(__P__))).mod(__P__)).add(bigInt(ctx.getVar(\"j\",[]))).mod(__P__));\n                if (bigInt(bigInt(ctx.getVar(\"current_bit\",[])).lt(bigInt(ctx.getVar(\"n_bits\",[]))) ? 1 : 0).neq(bigInt(0))) {\n                {\n                    ctx.setPin(\"compressions\", [ctx.getVar(\"i\",[])], \"in_m\", [ctx.getVar(\"l\",[]),ctx.getVar(\"j\",[])], ctx.getSignal(\"in_bits\", [ctx.getVar(\"current_bit\",[])]));\n                }\n\n                } else {\n                {\n                    ctx.setPin(\"compressions\", [ctx.getVar(\"i\",[])], \"in_m\", [ctx.getVar(\"l\",[]),ctx.getVar(\"j\",[])], \"0\");\n                }\n\n                }\n            }\n\n             }\n        }\n\n         }\n        if (bigInt((bigInt(ctx.getVar(\"i\",[])).eq(bigInt(bigInt(ctx.getVar(\"num_blocks\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0)).neq(bigInt(0))) {\n        {\n            for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(\"8\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n            {\n                for (ctx.setVar(\"k\", [], \"0\");bigInt(bigInt(ctx.getVar(\"k\",[])).lt(bigInt(\"4\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n                {\n                    for (ctx.setVar(\"l\", [], \"0\");bigInt(bigInt(ctx.getVar(\"l\",[])).lt(bigInt(\"8\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"l\", [], bigInt(ctx.getVar(\"l\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n                    {\n                        ctx.setSignal(\"out\", [bigInt(bigInt(bigInt(\"32\").mul(bigInt(ctx.getVar(\"j\",[]))).mod(__P__)).add(bigInt(bigInt(\"8\").mul(bigInt(ctx.getVar(\"k\",[]))).mod(__P__))).mod(__P__)).add(bigInt(ctx.getVar(\"l\",[]))).mod(__P__)], ctx.getPin(\"compressions\", [bigInt(ctx.getVar(\"num_blocks\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"out_h\", [bigInt(\"7\").add(__P__).sub(bigInt(ctx.getVar(\"j\",[]))).mod(__P__),bigInt(bigInt(bigInt(\"3\").add(__P__).sub(bigInt(ctx.getVar(\"k\",[]))).mod(__P__)).mul(bigInt(\"8\")).mod(__P__)).add(bigInt(ctx.getVar(\"l\",[]))).mod(__P__)]));\n                    }\n\n                     }\n                }\n\n                 }\n            }\n\n             }\n        }\n\n        }\n    }\n\n     }\n}\n",
  "HashLeftRight": "function(ctx) {\n    ctx.setPin(\"hasher\", [], \"ins\", [\"0\"], ctx.getSignal(\"left\", []));\n    ctx.setPin(\"hasher\", [], \"ins\", [\"1\"], ctx.getSignal(\"right\", []));\n    ctx.setPin(\"hasher\", [], \"k\", [], \"0\");\n    ctx.setSignal(\"hash\", [], ctx.getPin(\"hasher\", [], \"outs\", [\"0\"]));\n}\n",
  "Selector": "function(ctx) {\n    ctx.assert(bigInt(ctx.getSignal(\"path_index\", [])).mul(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getSignal(\"path_index\", []))).mod(__P__))).mod(__P__), \"0\", \"undefined:34:2\");\n    ctx.setSignal(\"left_selector_1\", [], bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getSignal(\"path_index\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"input_elem\", []))).mod(__P__));\n    ctx.setSignal(\"left_selector_2\", [], bigInt(ctx.getSignal(\"path_index\", [])).mul(bigInt(ctx.getSignal(\"path_elem\", []))).mod(__P__));\n    ctx.setSignal(\"right_selector_1\", [], bigInt(ctx.getSignal(\"path_index\", [])).mul(bigInt(ctx.getSignal(\"input_elem\", []))).mod(__P__));\n    ctx.setSignal(\"right_selector_2\", [], bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getSignal(\"path_index\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"path_elem\", []))).mod(__P__));\n    ctx.setSignal(\"left\", [], bigInt(ctx.getSignal(\"left_selector_1\", [])).add(bigInt(ctx.getSignal(\"left_selector_2\", []))).mod(__P__));\n    ctx.setSignal(\"right\", [], bigInt(ctx.getSignal(\"right_selector_1\", [])).add(bigInt(ctx.getSignal(\"right_selector_2\", []))).mod(__P__));\n}\n",
  "Semaphore": "function(ctx) {\n    ctx.assert(ctx.getSignal(\"fake_zero\", []), \"0\", \"undefined:53:4\");\n    ctx.setPin(\"dbl1\", [], \"x\", [], ctx.getSignal(\"identity_pk\", [\"0\"]));\n    ctx.setPin(\"dbl1\", [], \"y\", [], ctx.getSignal(\"identity_pk\", [\"1\"]));\n    ctx.setPin(\"dbl2\", [], \"x\", [], ctx.getPin(\"dbl1\", [], \"xout\", []));\n    ctx.setPin(\"dbl2\", [], \"y\", [], ctx.getPin(\"dbl1\", [], \"yout\", []));\n    ctx.setPin(\"dbl3\", [], \"x\", [], ctx.getPin(\"dbl2\", [], \"xout\", []));\n    ctx.setPin(\"dbl3\", [], \"y\", [], ctx.getPin(\"dbl2\", [], \"yout\", []));\n    ctx.setPin(\"identity_nullifier_bits\", [], \"in\", [], ctx.getSignal(\"identity_nullifier\", []));\n    ctx.setPin(\"identity_trapdoor_bits\", [], \"in\", [], ctx.getSignal(\"identity_trapdoor\", []));\n    ctx.setPin(\"identity_pk_0_bits\", [], \"in\", [], ctx.getPin(\"dbl3\", [], \"xout\", []));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"256\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        if (bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"254\")) ? 1 : 0).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"identity_commitment\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"identity_pk_0_bits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"identity_commitment\", [], \"in\", [ctx.getVar(\"i\",[])], \"0\");\n        }\n\n        }\n        if (bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"248\")) ? 1 : 0).neq(bigInt(0))) {\n        {\n            ctx.setPin(\"identity_commitment\", [], \"in\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"256\")).mod(__P__)], ctx.getPin(\"identity_nullifier_bits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n            ctx.setPin(\"identity_commitment\", [], \"in\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"512\")).mod(__P__)], ctx.getPin(\"identity_trapdoor_bits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        }\n\n        } else {\n        {\n            ctx.setPin(\"identity_commitment\", [], \"in\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"256\")).mod(__P__)], \"0\");\n            ctx.setPin(\"identity_commitment\", [], \"in\", [bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"512\")).mod(__P__)], \"0\");\n        }\n\n        }\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n_levels\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"selectors\", [ctx.getVar(\"i\",[])], \"path_index\", [], ctx.getSignal(\"identity_path_index\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"selectors\", [ctx.getVar(\"i\",[])], \"path_elem\", [], ctx.getSignal(\"identity_path_elements\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"hashers\", [ctx.getVar(\"i\",[])], \"left\", [], ctx.getPin(\"selectors\", [ctx.getVar(\"i\",[])], \"left\", []));\n        ctx.setPin(\"hashers\", [ctx.getVar(\"i\",[])], \"right\", [], ctx.getPin(\"selectors\", [ctx.getVar(\"i\",[])], \"right\", []));\n    }\n\n     }\n    ctx.setPin(\"selectors\", [\"0\"], \"input_elem\", [], ctx.getPin(\"identity_commitment\", [], \"out\", [\"0\"]));\n    for (ctx.setVar(\"i\", [], \"1\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n_levels\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"selectors\", [ctx.getVar(\"i\",[])], \"input_elem\", [], ctx.getPin(\"hashers\", [bigInt(ctx.getVar(\"i\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"hash\", []));\n    }\n\n     }\n    ctx.setSignal(\"root\", [], ctx.getPin(\"hashers\", [bigInt(ctx.getVar(\"n_levels\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)], \"hash\", []));\n    ctx.setPin(\"external_nullifier_bits\", [], \"in\", [], ctx.getSignal(\"external_nullifier\", []));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"248\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"nullifiers_hasher\", [], \"in_bits\", [ctx.getVar(\"i\",[])], ctx.getPin(\"identity_nullifier_bits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"232\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"nullifiers_hasher\", [], \"in_bits\", [bigInt(\"248\").add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)], ctx.getPin(\"external_nullifier_bits\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n_levels\",[]))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"nullifiers_hasher\", [], \"in_bits\", [bigInt(\"480\").add(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)], ctx.getSignal(\"identity_path_index\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], bigInt(\"480\").add(bigInt(ctx.getVar(\"n_levels\",[]))).mod(__P__));bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"512\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"nullifiers_hasher\", [], \"in_bits\", [ctx.getVar(\"i\",[])], \"0\");\n    }\n\n     }\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(bigInt(ctx.getVar(\"i\",[])).lt(bigInt(\"253\")) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"nullifiers_hash_num\", [], \"in\", [ctx.getVar(\"i\",[])], ctx.getPin(\"nullifiers_hasher\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setSignal(\"nullifiers_hash\", [], ctx.getPin(\"nullifiers_hash_num\", [], \"out\", []));\n    ctx.setPin(\"msg_hasher\", [], \"ins\", [\"0\"], ctx.getSignal(\"external_nullifier\", []));\n    ctx.setPin(\"msg_hasher\", [], \"ins\", [\"1\"], ctx.getSignal(\"signal_hash\", []));\n    ctx.setPin(\"msg_hasher\", [], \"k\", [], \"0\");\n    ctx.setPin(\"sig_verifier\", [], \"enabled\", [], bigInt(\"1\").add(__P__).sub(bigInt(ctx.getSignal(\"fake_zero\", []))).mod(__P__));\n    ctx.setPin(\"sig_verifier\", [], \"Ax\", [], ctx.getSignal(\"identity_pk\", [\"0\"]));\n    ctx.setPin(\"sig_verifier\", [], \"Ay\", [], ctx.getSignal(\"identity_pk\", [\"1\"]));\n    ctx.setPin(\"sig_verifier\", [], \"R8x\", [], ctx.getSignal(\"auth_sig_r\", [\"0\"]));\n    ctx.setPin(\"sig_verifier\", [], \"R8y\", [], ctx.getSignal(\"auth_sig_r\", [\"1\"]));\n    ctx.setPin(\"sig_verifier\", [], \"S\", [], ctx.getSignal(\"auth_sig_s\", []));\n    ctx.setPin(\"sig_verifier\", [], \"M\", [], ctx.getPin(\"msg_hasher\", [], \"outs\", [\"0\"]));\n}\n",
  "InclusionProof": "function(ctx) {\n}\n",
  "NullifyingProof": "function(ctx) {\n}\n",
  "ZkTransfer": "function(ctx) {\n}\n"
 },
 "functions": {
  "nbits": {
   "params": [
    "a"
   ],
   "func": "function(ctx) {\n    ctx.setVar(\"n\", [], \"1\");\n    ctx.setVar(\"r\", [], \"0\");\n    while (bigInt(bigInt(bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).lt(bigInt(ctx.getVar(\"a\",[]))) ? 1 : 0).neq(bigInt(0))) {\n    {\n        (ctx.setVar(\"r\", [], bigInt(ctx.getVar(\"r\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__);\n        ctx.setVar(\"n\", [], bigInt(ctx.getVar(\"n\",[])).mul(bigInt(\"2\")).mod(__P__));\n    }\n\n    }\n    return ctx.getVar(\"r\",[]);;\n}\n"
  },
  "sqrt": {
   "params": [
    "n"
   ],
   "func": "function(ctx) {\n    if (bigInt((bigInt(ctx.getVar(\"n\",[])).eq(bigInt(\"0\")) ? 1 : 0)).neq(bigInt(0))) {\n    {\n        return \"0\";;\n    }\n\n    }\n    ctx.setVar(\"res\", [], bigInt(ctx.getVar(\"n\",[])).modPow(bigInt(\"10944121435919637611123202872628637544274182200208017171849102093287904247808\"), __P__));\n    if (bigInt((bigInt(ctx.getVar(\"res\",[])).eq(bigInt(\"1\")) ? 0 : 1)).neq(bigInt(0))) {\n    return \"0\";\n    }\n    ctx.setVar(\"m\", [], \"28\");\n    ctx.setVar(\"c\", [], \"19103219067921713944291392827692070036145651957329286315305642004821462161904\");\n    ctx.setVar(\"t\", [], bigInt(ctx.getVar(\"n\",[])).modPow(bigInt(\"81540058820840996586704275553141814055101440848469862132140264610111\"), __P__));\n    ctx.setVar(\"r\", [], bigInt(ctx.getVar(\"n\",[])).modPow(bigInt(\"40770029410420498293352137776570907027550720424234931066070132305056\"), __P__));\n    while (bigInt(((bigInt((bigInt(ctx.getVar(\"r\",[])).eq(bigInt(\"0\")) ? 0 : 1)).neq(bigInt(0)) && bigInt((bigInt(ctx.getVar(\"t\",[])).eq(bigInt(\"1\")) ? 0 : 1)).neq(bigInt(0))) ? bigInt(1) : bigInt(0))).neq(bigInt(0))) {\n    {\n        ctx.setVar(\"sq\", [], bigInt(ctx.getVar(\"t\",[])).mul(bigInt(ctx.getVar(\"t\",[]))).mod(__P__));\n        ctx.setVar(\"i\", [], \"1\");\n        while (bigInt((bigInt(ctx.getVar(\"sq\",[])).eq(bigInt(\"1\")) ? 0 : 1)).neq(bigInt(0))) {\n        {\n            (ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__);\n            ctx.setVar(\"sq\", [], bigInt(ctx.getVar(\"sq\",[])).mul(bigInt(ctx.getVar(\"sq\",[]))).mod(__P__));\n        }\n\n        }\n        ctx.setVar(\"b\", [], ctx.getVar(\"c\",[]));\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(bigInt(ctx.getVar(\"j\",[])).lt(bigInt(bigInt(bigInt(ctx.getVar(\"m\",[])).add(__P__).sub(bigInt(ctx.getVar(\"i\",[]))).mod(__P__)).add(__P__).sub(bigInt(\"1\")).mod(__P__))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        ctx.setVar(\"b\", [], bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"b\",[]))).mod(__P__))\n         }\n        ctx.setVar(\"m\", [], ctx.getVar(\"i\",[]));\n        ctx.setVar(\"c\", [], bigInt(ctx.getVar(\"b\",[])).mul(bigInt(ctx.getVar(\"b\",[]))).mod(__P__));\n        ctx.setVar(\"t\", [], bigInt(ctx.getVar(\"t\",[])).mul(bigInt(ctx.getVar(\"c\",[]))).mod(__P__));\n        ctx.setVar(\"r\", [], bigInt(ctx.getVar(\"r\",[])).mul(bigInt(ctx.getVar(\"b\",[]))).mod(__P__));\n    }\n\n    }\n    if (bigInt(bigInt(ctx.getVar(\"r\",[])).gt(bigInt(\"10944121435919637611123202872628637544274182200208017171849102093287904247808\")) ? 1 : 0).neq(bigInt(0))) {\n    {\n        ctx.setVar(\"r\", [], __P__.sub(bigInt(ctx.getVar(\"r\",[]))).mod(__P__));\n    }\n\n    }\n    return ctx.getVar(\"r\",[]);;\n}\n"
  }
 },
 "nPrvInputs": 542,
 "nPubInputs": 5,
 "nInputs": 547,
 "nOutputs": 2,
 "nVars": 550,
 "nConstants": 0,
 "nSignals": 550
}